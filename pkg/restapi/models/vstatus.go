// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Vstatus vstatus
//
// swagger:model vstatus
type Vstatus string

func NewVstatus(value Vstatus) *Vstatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Vstatus.
func (m Vstatus) Pointer() *Vstatus {
	return &m
}

const (

	// VstatusVALIDATED captures enum value "VALIDATED"
	VstatusVALIDATED Vstatus = "VALIDATED"

	// VstatusPUBLISHED captures enum value "PUBLISHED"
	VstatusPUBLISHED Vstatus = "PUBLISHED"

	// VstatusREJECTED captures enum value "REJECTED"
	VstatusREJECTED Vstatus = "REJECTED"

	// VstatusPENDINGV captures enum value "PENDINGV"
	VstatusPENDINGV Vstatus = "PENDINGV"

	// VstatusPENDINGP captures enum value "PENDINGP"
	VstatusPENDINGP Vstatus = "PENDINGP"
)

// for schema
var vstatusEnum []interface{}

func init() {
	var res []Vstatus
	if err := json.Unmarshal([]byte(`["VALIDATED","PUBLISHED","REJECTED","PENDINGV","PENDINGP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vstatusEnum = append(vstatusEnum, v)
	}
}

func (m Vstatus) validateVstatusEnum(path, location string, value Vstatus) error {
	if err := validate.EnumCase(path, location, value, vstatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vstatus
func (m Vstatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVstatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vstatus based on context it is used
func (m Vstatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
