// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Munit Measurement units are used to quantify values provided by time series.
//
//
// swagger:model munit
type Munit struct {
	auditTrailField *Audit

	descriptionLongField Translation

	descriptionShortField Translation

	idField int64

	titleField Translation

	// included multiplier
	IncludedMultiplier Multiplier `json:"includedMultiplier,omitempty"`

	// is standard
	// Required: true
	IsStandard *bool `json:"isStandard"`

	// measurement unit has conversions
	MeasurementUnitHasConversions []ConversionSpec `json:"measurementUnitHasConversions"`

	// metadata
	Metadata *Mumeta `json:"metadata,omitempty"`

	// unit measurement
	UnitMeasurement Measurement `json:"unitMeasurement,omitempty"`

	// unit measurement system
	UnitMeasurementSystem Musystem `json:"unitMeasurementSystem,omitempty"`
}

// AuditTrail gets the audit trail of this subtype
func (m *Munit) AuditTrail() *Audit {
	return m.auditTrailField
}

// SetAuditTrail sets the audit trail of this subtype
func (m *Munit) SetAuditTrail(val *Audit) {
	m.auditTrailField = val
}

// DescriptionLong gets the description long of this subtype
func (m *Munit) DescriptionLong() Translation {
	return m.descriptionLongField
}

// SetDescriptionLong sets the description long of this subtype
func (m *Munit) SetDescriptionLong(val Translation) {
	m.descriptionLongField = val
}

// DescriptionShort gets the description short of this subtype
func (m *Munit) DescriptionShort() Translation {
	return m.descriptionShortField
}

// SetDescriptionShort sets the description short of this subtype
func (m *Munit) SetDescriptionShort(val Translation) {
	m.descriptionShortField = val
}

// ID gets the id of this subtype
func (m *Munit) ID() int64 {
	return m.idField
}

// SetID sets the id of this subtype
func (m *Munit) SetID(val int64) {
	m.idField = val
}

// ShortCode gets the short code of this subtype
func (m *Munit) ShortCode() ClassNomenclatureName {
	return "munit"
}

// SetShortCode sets the short code of this subtype
func (m *Munit) SetShortCode(val ClassNomenclatureName) {
}

// Title gets the title of this subtype
func (m *Munit) Title() Translation {
	return m.titleField
}

// SetTitle sets the title of this subtype
func (m *Munit) SetTitle(val Translation) {
	m.titleField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Munit) UnmarshalJSON(raw []byte) error {
	var data struct {

		// included multiplier
		IncludedMultiplier Multiplier `json:"includedMultiplier,omitempty"`

		// is standard
		// Required: true
		IsStandard *bool `json:"isStandard"`

		// measurement unit has conversions
		MeasurementUnitHasConversions []ConversionSpec `json:"measurementUnitHasConversions"`

		// metadata
		Metadata *Mumeta `json:"metadata,omitempty"`

		// unit measurement
		UnitMeasurement Measurement `json:"unitMeasurement,omitempty"`

		// unit measurement system
		UnitMeasurementSystem Musystem `json:"unitMeasurementSystem,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		AuditTrail *Audit `json:"auditTrail,omitempty"`

		DescriptionLong Translation `json:"descriptionLong,omitempty"`

		DescriptionShort Translation `json:"descriptionShort,omitempty"`

		ID int64 `json:"id"`

		ShortCode ClassNomenclatureName `json:"shortCode"`

		Title Translation `json:"title"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Munit

	result.auditTrailField = base.AuditTrail

	result.descriptionLongField = base.DescriptionLong

	result.descriptionShortField = base.DescriptionShort

	result.idField = base.ID

	if base.ShortCode != result.ShortCode() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid shortCode value: %q", base.ShortCode)
	}
	result.titleField = base.Title

	result.IncludedMultiplier = data.IncludedMultiplier
	result.IsStandard = data.IsStandard
	result.MeasurementUnitHasConversions = data.MeasurementUnitHasConversions
	result.Metadata = data.Metadata
	result.UnitMeasurement = data.UnitMeasurement
	result.UnitMeasurementSystem = data.UnitMeasurementSystem

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Munit) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// included multiplier
		IncludedMultiplier Multiplier `json:"includedMultiplier,omitempty"`

		// is standard
		// Required: true
		IsStandard *bool `json:"isStandard"`

		// measurement unit has conversions
		MeasurementUnitHasConversions []ConversionSpec `json:"measurementUnitHasConversions"`

		// metadata
		Metadata *Mumeta `json:"metadata,omitempty"`

		// unit measurement
		UnitMeasurement Measurement `json:"unitMeasurement,omitempty"`

		// unit measurement system
		UnitMeasurementSystem Musystem `json:"unitMeasurementSystem,omitempty"`
	}{

		IncludedMultiplier: m.IncludedMultiplier,

		IsStandard: m.IsStandard,

		MeasurementUnitHasConversions: m.MeasurementUnitHasConversions,

		Metadata: m.Metadata,

		UnitMeasurement: m.UnitMeasurement,

		UnitMeasurementSystem: m.UnitMeasurementSystem,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		AuditTrail *Audit `json:"auditTrail,omitempty"`

		DescriptionLong Translation `json:"descriptionLong,omitempty"`

		DescriptionShort Translation `json:"descriptionShort,omitempty"`

		ID int64 `json:"id"`

		ShortCode ClassNomenclatureName `json:"shortCode"`

		Title Translation `json:"title"`
	}{

		AuditTrail: m.AuditTrail(),

		DescriptionLong: m.DescriptionLong(),

		DescriptionShort: m.DescriptionShort(),

		ID: m.ID(),

		ShortCode: m.ShortCode(),

		Title: m.Title(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this munit
func (m *Munit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditTrail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionShort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludedMultiplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasurementUnitHasConversions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitMeasurementSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Munit) validateAuditTrail(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditTrail()) { // not required
		return nil
	}

	if m.AuditTrail() != nil {
		if err := m.AuditTrail().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) validateDescriptionLong(formats strfmt.Registry) error {

	if swag.IsZero(m.DescriptionLong()) { // not required
		return nil
	}

	if m.DescriptionLong() != nil {
		if err := m.DescriptionLong().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionLong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionLong")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) validateDescriptionShort(formats strfmt.Registry) error {

	if swag.IsZero(m.DescriptionShort()) { // not required
		return nil
	}

	if m.DescriptionShort() != nil {
		if err := m.DescriptionShort().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionShort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionShort")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *Munit) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title()); err != nil {
		return err
	}

	if m.Title() != nil {
		if err := m.Title().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) validateIncludedMultiplier(formats strfmt.Registry) error {

	if swag.IsZero(m.IncludedMultiplier) { // not required
		return nil
	}

	if err := m.IncludedMultiplier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includedMultiplier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includedMultiplier")
		}
		return err
	}

	return nil
}

func (m *Munit) validateIsStandard(formats strfmt.Registry) error {

	if err := validate.Required("isStandard", "body", m.IsStandard); err != nil {
		return err
	}

	return nil
}

func (m *Munit) validateMeasurementUnitHasConversions(formats strfmt.Registry) error {

	if swag.IsZero(m.MeasurementUnitHasConversions) { // not required
		return nil
	}

	for i := 0; i < len(m.MeasurementUnitHasConversions); i++ {

		if err := m.MeasurementUnitHasConversions[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measurementUnitHasConversions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("measurementUnitHasConversions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Munit) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) validateUnitMeasurement(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitMeasurement) { // not required
		return nil
	}

	if err := m.UnitMeasurement.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitMeasurement")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitMeasurement")
		}
		return err
	}

	return nil
}

func (m *Munit) validateUnitMeasurementSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitMeasurementSystem) { // not required
		return nil
	}

	if err := m.UnitMeasurementSystem.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitMeasurementSystem")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitMeasurementSystem")
		}
		return err
	}

	return nil
}

// ContextValidate validate this munit based on the context it is used
func (m *Munit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditTrail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionLong(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionShort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludedMultiplier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeasurementUnitHasConversions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitMeasurement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitMeasurementSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Munit) contextValidateAuditTrail(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditTrail() != nil {
		if err := m.AuditTrail().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) contextValidateDescriptionLong(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionLong().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionLong")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionLong")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateDescriptionShort(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionShort().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionShort")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionShort")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *Munit) contextValidateShortCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShortCode().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shortCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shortCode")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Title().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("title")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("title")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateIncludedMultiplier(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IncludedMultiplier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includedMultiplier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includedMultiplier")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateMeasurementUnitHasConversions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MeasurementUnitHasConversions); i++ {

		if err := m.MeasurementUnitHasConversions[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measurementUnitHasConversions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("measurementUnitHasConversions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Munit) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Munit) contextValidateUnitMeasurement(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UnitMeasurement.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitMeasurement")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitMeasurement")
		}
		return err
	}

	return nil
}

func (m *Munit) contextValidateUnitMeasurementSystem(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UnitMeasurementSystem.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitMeasurementSystem")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitMeasurementSystem")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Munit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Munit) UnmarshalBinary(b []byte) error {
	var res Munit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
