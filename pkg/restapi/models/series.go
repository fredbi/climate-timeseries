// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Series A time series.
//
// The brief description omits descriptionLong, statusChangeReason, tags, linkedDocuments and auditTrail.
//
// The field auditTrail is read-only and requires the "audit" query parameter to be retrieved.
//
// The field seriesHasVersions requires the "deep" query parameter to be retrieved.
//
//
// swagger:model series
type Series struct {

	// audit trail
	AuditTrail *Audit `json:"auditTrail,omitempty"`

	// data source
	// Required: true
	DataSource Source `json:"dataSource"`

	// description long
	DescriptionLong Translation `json:"descriptionLong,omitempty"`

	// description short
	DescriptionShort Translation `json:"descriptionShort,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// input composed unit
	InputComposedUnit CompositeUnit `json:"inputComposedUnit,omitempty"`

	// linked documents
	LinkedDocuments Documents `json:"linkedDocuments,omitempty"`

	// measurement unit
	// Required: true
	MeasurementUnit Munit `json:"measurementUnit"`

	// series has owners
	SeriesHasOwners []Owner `json:"seriesHasOwners"`

	// series has themes
	SeriesHasThemes []Theme `json:"seriesHasThemes"`

	// series has versions
	SeriesHasVersions []VersionedSeries `json:"seriesHasVersions"`

	// status
	// Required: true
	Status *Vstatus `json:"status"`

	// status change reason
	StatusChangeReason Translation `json:"statusChangeReason,omitempty"`

	// tags
	Tags SearchTags `json:"tags,omitempty"`

	// time period
	// Required: true
	TimePeriod Period `json:"timePeriod"`

	// title
	// Required: true
	Title Translation `json:"title"`

	// zone
	// Required: true
	Zone Zone `json:"zone"`
}

// Validate validates this series
func (m *Series) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditTrail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionShort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasurementUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriesHasOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriesHasThemes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriesHasVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangeReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Series) validateAuditTrail(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditTrail) { // not required
		return nil
	}

	if m.AuditTrail != nil {
		if err := m.AuditTrail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateDataSource(formats strfmt.Registry) error {

	if err := m.DataSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataSource")
		}
		return err
	}

	return nil
}

func (m *Series) validateDescriptionLong(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionLong) { // not required
		return nil
	}

	if m.DescriptionLong != nil {
		if err := m.DescriptionLong.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionLong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionLong")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateDescriptionShort(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionShort) { // not required
		return nil
	}

	if m.DescriptionShort != nil {
		if err := m.DescriptionShort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionShort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionShort")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Series) validateLinkedDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkedDocuments) { // not required
		return nil
	}

	if err := m.LinkedDocuments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("linkedDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("linkedDocuments")
		}
		return err
	}

	return nil
}

func (m *Series) validateMeasurementUnit(formats strfmt.Registry) error {

	if err := m.MeasurementUnit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("measurementUnit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("measurementUnit")
		}
		return err
	}

	return nil
}

func (m *Series) validateSeriesHasOwners(formats strfmt.Registry) error {
	if swag.IsZero(m.SeriesHasOwners) { // not required
		return nil
	}

	for i := 0; i < len(m.SeriesHasOwners); i++ {

		if err := m.SeriesHasOwners[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasOwners" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasOwners" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) validateSeriesHasThemes(formats strfmt.Registry) error {
	if swag.IsZero(m.SeriesHasThemes) { // not required
		return nil
	}

	for i := 0; i < len(m.SeriesHasThemes); i++ {

		if err := m.SeriesHasThemes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasThemes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasThemes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) validateSeriesHasVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.SeriesHasVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.SeriesHasVersions); i++ {

		if err := m.SeriesHasVersions[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasVersions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasVersions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateStatusChangeReason(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusChangeReason) { // not required
		return nil
	}

	if m.StatusChangeReason != nil {
		if err := m.StatusChangeReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangeReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangeReason")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tags")
		}
		return err
	}

	return nil
}

func (m *Series) validateTimePeriod(formats strfmt.Registry) error {

	if err := m.TimePeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timePeriod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timePeriod")
		}
		return err
	}

	return nil
}

func (m *Series) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

func (m *Series) validateZone(formats strfmt.Registry) error {

	if err := m.Zone.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("zone")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("zone")
		}
		return err
	}

	return nil
}

// ContextValidate validate this series based on the context it is used
func (m *Series) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditTrail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionLong(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionShort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkedDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeasurementUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeriesHasOwners(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeriesHasThemes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeriesHasVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusChangeReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Series) contextValidateAuditTrail(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditTrail != nil {
		if err := m.AuditTrail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *Series) contextValidateDataSource(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DataSource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataSource")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateDescriptionLong(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionLong.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionLong")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionLong")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateDescriptionShort(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionShort.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionShort")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionShort")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateLinkedDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LinkedDocuments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("linkedDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("linkedDocuments")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateMeasurementUnit(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MeasurementUnit.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("measurementUnit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("measurementUnit")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateSeriesHasOwners(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SeriesHasOwners); i++ {

		if err := m.SeriesHasOwners[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasOwners" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasOwners" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) contextValidateSeriesHasThemes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SeriesHasThemes); i++ {

		if err := m.SeriesHasThemes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasThemes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasThemes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) contextValidateSeriesHasVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SeriesHasVersions); i++ {

		if err := m.SeriesHasVersions[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seriesHasVersions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seriesHasVersions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Series) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Series) contextValidateStatusChangeReason(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StatusChangeReason.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("statusChangeReason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("statusChangeReason")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Tags.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tags")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateTimePeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TimePeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timePeriod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timePeriod")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Title.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("title")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("title")
		}
		return err
	}

	return nil
}

func (m *Series) contextValidateZone(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Zone.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("zone")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("zone")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Series) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Series) UnmarshalBinary(b []byte) error {
	var res Series
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
