// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/fredbi/climate-timeseries/pkg/restapi/extra"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedSeries A version of a time series.
//
// The brief description omits versionDescriptionLong, versionStatusChangeReason, tags, linkedDocuments and auditTrail.
//
// The field auditTrail is read-only and requires the "audit" query parameter to be retrieved.
//
// The field timeseries requires the "deep" query parameter to be retrieved.
//
//
// swagger:model versionedSeries
type VersionedSeries struct {

	// audit trail
	AuditTrail *Audit `json:"auditTrail,omitempty"`

	// formula
	Formula string `json:"formula,omitempty"`

	// parent versioned Id
	// Format: uuid
	ParentVersionedID strfmt.UUID `json:"parentVersionedId,omitempty"`

	// timeseries
	Timeseries TsValues `json:"timeseries,omitempty"`

	// version
	// Required: true
	Version *extra.Semver `json:"version"`

	// version description long
	VersionDescriptionLong Translation `json:"versionDescriptionLong,omitempty"`

	// version description short
	VersionDescriptionShort Translation `json:"versionDescriptionShort,omitempty"`

	// version owner
	// Format: uuid
	VersionOwner strfmt.UUID `json:"versionOwner,omitempty"`

	// version status
	// Required: true
	VersionStatus *Vstatus `json:"versionStatus"`

	// version status change reason
	VersionStatusChangeReason Translation `json:"versionStatusChangeReason,omitempty"`

	// version title
	VersionTitle Translation `json:"versionTitle,omitempty"`

	// versioned Id
	// Required: true
	// Read Only: true
	// Format: uuid
	VersionedID strfmt.UUID `json:"versionedId"`
}

// Validate validates this versioned series
func (m *VersionedSeries) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditTrail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentVersionedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeseries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionDescriptionLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionDescriptionShort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionStatusChangeReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionedID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedSeries) validateAuditTrail(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditTrail) { // not required
		return nil
	}

	if m.AuditTrail != nil {
		if err := m.AuditTrail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateParentVersionedID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentVersionedID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentVersionedId", "body", "uuid", m.ParentVersionedID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionedSeries) validateTimeseries(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeseries) { // not required
		return nil
	}

	if err := m.Timeseries.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeseries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeseries")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionDescriptionLong(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionDescriptionLong) { // not required
		return nil
	}

	if m.VersionDescriptionLong != nil {
		if err := m.VersionDescriptionLong.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionDescriptionLong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionDescriptionLong")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionDescriptionShort(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionDescriptionShort) { // not required
		return nil
	}

	if m.VersionDescriptionShort != nil {
		if err := m.VersionDescriptionShort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionDescriptionShort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionDescriptionShort")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionOwner) { // not required
		return nil
	}

	if err := validate.FormatOf("versionOwner", "body", "uuid", m.VersionOwner.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionedSeries) validateVersionStatus(formats strfmt.Registry) error {

	if err := validate.Required("versionStatus", "body", m.VersionStatus); err != nil {
		return err
	}

	if err := validate.Required("versionStatus", "body", m.VersionStatus); err != nil {
		return err
	}

	if m.VersionStatus != nil {
		if err := m.VersionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionStatusChangeReason(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionStatusChangeReason) { // not required
		return nil
	}

	if m.VersionStatusChangeReason != nil {
		if err := m.VersionStatusChangeReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionStatusChangeReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionStatusChangeReason")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionTitle) { // not required
		return nil
	}

	if m.VersionTitle != nil {
		if err := m.VersionTitle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionTitle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionTitle")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) validateVersionedID(formats strfmt.Registry) error {

	if err := validate.Required("versionedId", "body", strfmt.UUID(m.VersionedID)); err != nil {
		return err
	}

	if err := validate.FormatOf("versionedId", "body", "uuid", m.VersionedID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this versioned series based on the context it is used
func (m *VersionedSeries) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditTrail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeseries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionDescriptionLong(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionDescriptionShort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionStatusChangeReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionedID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedSeries) contextValidateAuditTrail(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditTrail != nil {
		if err := m.AuditTrail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) contextValidateTimeseries(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Timeseries.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeseries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeseries")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {
		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionDescriptionLong(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionDescriptionLong.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("versionDescriptionLong")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("versionDescriptionLong")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionDescriptionShort(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionDescriptionShort.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("versionDescriptionShort")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("versionDescriptionShort")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionStatus != nil {
		if err := m.VersionStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionStatusChangeReason(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionStatusChangeReason.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("versionStatusChangeReason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("versionStatusChangeReason")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionTitle.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("versionTitle")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("versionTitle")
		}
		return err
	}

	return nil
}

func (m *VersionedSeries) contextValidateVersionedID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versionedId", "body", strfmt.UUID(m.VersionedID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedSeries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedSeries) UnmarshalBinary(b []byte) error {
	var res VersionedSeries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
