// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConversionSpec Unit conversion specification.
//
//
// swagger:model conversionSpec
type ConversionSpec struct {

	// factor
	Factor float32 `json:"factor,omitempty"`

	// formula
	Formula expressions.Formula `json:"formula,omitempty"`

	// intercept
	Intercept float32 `json:"intercept,omitempty"`

	// reverse formula
	ReverseFormula expressions.Formula `json:"reverse_formula,omitempty"`

	// to unit code
	// Required: true
	ToUnitCode *string `json:"toUnitCode"`
}

// Validate validates this conversion spec
func (m *ConversionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormula(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReverseFormula(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUnitCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConversionSpec) validateFormula(formats strfmt.Registry) error {
	if swag.IsZero(m.Formula) { // not required
		return nil
	}

	if err := m.Formula.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("formula")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("formula")
		}
		return err
	}

	return nil
}

func (m *ConversionSpec) validateReverseFormula(formats strfmt.Registry) error {
	if swag.IsZero(m.ReverseFormula) { // not required
		return nil
	}

	if err := m.ReverseFormula.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reverse_formula")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reverse_formula")
		}
		return err
	}

	return nil
}

func (m *ConversionSpec) validateToUnitCode(formats strfmt.Registry) error {

	if err := validate.Required("toUnitCode", "body", m.ToUnitCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this conversion spec based on context it is used
func (m *ConversionSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConversionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConversionSpec) UnmarshalBinary(b []byte) error {
	var res ConversionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
