// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClassNomenclature class nomenclature
//
// swagger:discriminator classNomenclature shortCode
type ClassNomenclature interface {
	runtime.Validatable
	runtime.ContextValidatable

	// audit trail
	AuditTrail() *Audit
	SetAuditTrail(*Audit)

	// description long
	DescriptionLong() Translation
	SetDescriptionLong(Translation)

	// description short
	DescriptionShort() Translation
	SetDescriptionShort(Translation)

	// id
	// Required: true
	// Read Only: true
	ID() int64
	SetID(int64)

	// short code
	// Required: true
	ShortCode() ClassNomenclatureName
	SetShortCode(ClassNomenclatureName)

	// title
	// Required: true
	Title() Translation
	SetTitle(Translation)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type classNomenclature struct {
	auditTrailField *Audit

	descriptionLongField Translation

	descriptionShortField Translation

	idField int64

	shortCodeField ClassNomenclatureName

	titleField Translation
}

// AuditTrail gets the audit trail of this polymorphic type
func (m *classNomenclature) AuditTrail() *Audit {
	return m.auditTrailField
}

// SetAuditTrail sets the audit trail of this polymorphic type
func (m *classNomenclature) SetAuditTrail(val *Audit) {
	m.auditTrailField = val
}

// DescriptionLong gets the description long of this polymorphic type
func (m *classNomenclature) DescriptionLong() Translation {
	return m.descriptionLongField
}

// SetDescriptionLong sets the description long of this polymorphic type
func (m *classNomenclature) SetDescriptionLong(val Translation) {
	m.descriptionLongField = val
}

// DescriptionShort gets the description short of this polymorphic type
func (m *classNomenclature) DescriptionShort() Translation {
	return m.descriptionShortField
}

// SetDescriptionShort sets the description short of this polymorphic type
func (m *classNomenclature) SetDescriptionShort(val Translation) {
	m.descriptionShortField = val
}

// ID gets the id of this polymorphic type
func (m *classNomenclature) ID() int64 {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *classNomenclature) SetID(val int64) {
	m.idField = val
}

// ShortCode gets the short code of this polymorphic type
func (m *classNomenclature) ShortCode() ClassNomenclatureName {
	return "classNomenclature"
}

// SetShortCode sets the short code of this polymorphic type
func (m *classNomenclature) SetShortCode(val ClassNomenclatureName) {
}

// Title gets the title of this polymorphic type
func (m *classNomenclature) Title() Translation {
	return m.titleField
}

// SetTitle sets the title of this polymorphic type
func (m *classNomenclature) SetTitle(val Translation) {
	m.titleField = val
}

// UnmarshalClassNomenclatureSlice unmarshals polymorphic slices of ClassNomenclature
func UnmarshalClassNomenclatureSlice(reader io.Reader, consumer runtime.Consumer) ([]ClassNomenclature, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ClassNomenclature
	for _, element := range elements {
		obj, err := unmarshalClassNomenclature(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalClassNomenclature unmarshals polymorphic ClassNomenclature
func UnmarshalClassNomenclature(reader io.Reader, consumer runtime.Consumer) (ClassNomenclature, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalClassNomenclature(data, consumer)
}

func unmarshalClassNomenclature(data []byte, consumer runtime.Consumer) (ClassNomenclature, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the shortCode property.
	var getType struct {
		ShortCode string `json:"shortCode"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("shortCode", "body", getType.ShortCode); err != nil {
		return nil, err
	}

	// The value of shortCode is used to determine which type to create and unmarshal the data into
	switch getType.ShortCode {
	case "classNomenclature":
		var result classNomenclature
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "constant":
		var result Constant
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "mdimension":
		var result Mdimension
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "mdomain":
		var result Mdomain
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "measurement":
		var result Measurement
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "multiplier":
		var result Multiplier
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "munit":
		var result Munit
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "musystem":
		var result Musystem
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ostatus":
		var result Ostatus
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "owner":
		var result Owner
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "period":
		var result Period
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "role":
		var result Role
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "source":
		var result Source
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "status":
		var result Status
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "theme":
		var result Theme
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "zone":
		var result Zone
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ztype":
		var result Ztype
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid shortCode value: %q", getType.ShortCode)
}

// Validate validates this class nomenclature
func (m *classNomenclature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditTrail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionShort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *classNomenclature) validateAuditTrail(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditTrail()) { // not required
		return nil
	}

	if m.AuditTrail() != nil {
		if err := m.AuditTrail().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *classNomenclature) validateDescriptionLong(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionLong()) { // not required
		return nil
	}

	if m.DescriptionLong() != nil {
		if err := m.DescriptionLong().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionLong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionLong")
			}
			return err
		}
	}

	return nil
}

func (m *classNomenclature) validateDescriptionShort(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionShort()) { // not required
		return nil
	}

	if m.DescriptionShort() != nil {
		if err := m.DescriptionShort().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionShort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionShort")
			}
			return err
		}
	}

	return nil
}

func (m *classNomenclature) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *classNomenclature) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title()); err != nil {
		return err
	}

	if m.Title() != nil {
		if err := m.Title().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this class nomenclature based on the context it is used
func (m *classNomenclature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditTrail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionLong(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionShort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *classNomenclature) contextValidateAuditTrail(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditTrail() != nil {
		if err := m.AuditTrail().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditTrail")
			}
			return err
		}
	}

	return nil
}

func (m *classNomenclature) contextValidateDescriptionLong(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionLong().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionLong")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionLong")
		}
		return err
	}

	return nil
}

func (m *classNomenclature) contextValidateDescriptionShort(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DescriptionShort().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("descriptionShort")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("descriptionShort")
		}
		return err
	}

	return nil
}

func (m *classNomenclature) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID())); err != nil {
		return err
	}

	return nil
}

func (m *classNomenclature) contextValidateShortCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShortCode().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shortCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shortCode")
		}
		return err
	}

	return nil
}

func (m *classNomenclature) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Title().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("title")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("title")
		}
		return err
	}

	return nil
}
