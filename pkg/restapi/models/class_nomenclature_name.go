// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClassNomenclatureName class nomenclature name
//
// swagger:model classNomenclatureName
type ClassNomenclatureName string

func NewClassNomenclatureName(value ClassNomenclatureName) *ClassNomenclatureName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClassNomenclatureName.
func (m ClassNomenclatureName) Pointer() *ClassNomenclatureName {
	return &m
}

const (

	// ClassNomenclatureNameConstant captures enum value "constant"
	ClassNomenclatureNameConstant ClassNomenclatureName = "constant"

	// ClassNomenclatureNameMdimension captures enum value "mdimension"
	ClassNomenclatureNameMdimension ClassNomenclatureName = "mdimension"

	// ClassNomenclatureNameMdomain captures enum value "mdomain"
	ClassNomenclatureNameMdomain ClassNomenclatureName = "mdomain"

	// ClassNomenclatureNameMeasurement captures enum value "measurement"
	ClassNomenclatureNameMeasurement ClassNomenclatureName = "measurement"

	// ClassNomenclatureNameMunit captures enum value "munit"
	ClassNomenclatureNameMunit ClassNomenclatureName = "munit"

	// ClassNomenclatureNameMultiplier captures enum value "multiplier"
	ClassNomenclatureNameMultiplier ClassNomenclatureName = "multiplier"

	// ClassNomenclatureNameMusystem captures enum value "musystem"
	ClassNomenclatureNameMusystem ClassNomenclatureName = "musystem"

	// ClassNomenclatureNameOstatus captures enum value "ostatus"
	ClassNomenclatureNameOstatus ClassNomenclatureName = "ostatus"

	// ClassNomenclatureNameOwner captures enum value "owner"
	ClassNomenclatureNameOwner ClassNomenclatureName = "owner"

	// ClassNomenclatureNamePeriod captures enum value "period"
	ClassNomenclatureNamePeriod ClassNomenclatureName = "period"

	// ClassNomenclatureNameRole captures enum value "role"
	ClassNomenclatureNameRole ClassNomenclatureName = "role"

	// ClassNomenclatureNameSource captures enum value "source"
	ClassNomenclatureNameSource ClassNomenclatureName = "source"

	// ClassNomenclatureNameStatus captures enum value "status"
	ClassNomenclatureNameStatus ClassNomenclatureName = "status"

	// ClassNomenclatureNameTheme captures enum value "theme"
	ClassNomenclatureNameTheme ClassNomenclatureName = "theme"

	// ClassNomenclatureNameZone captures enum value "zone"
	ClassNomenclatureNameZone ClassNomenclatureName = "zone"

	// ClassNomenclatureNameZtype captures enum value "ztype"
	ClassNomenclatureNameZtype ClassNomenclatureName = "ztype"
)

// for schema
var classNomenclatureNameEnum []interface{}

func init() {
	var res []ClassNomenclatureName
	if err := json.Unmarshal([]byte(`["constant","mdimension","mdomain","measurement","munit","multiplier","musystem","ostatus","owner","period","role","source","status","theme","zone","ztype"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		classNomenclatureNameEnum = append(classNomenclatureNameEnum, v)
	}
}

func (m ClassNomenclatureName) validateClassNomenclatureNameEnum(path, location string, value ClassNomenclatureName) error {
	if err := validate.EnumCase(path, location, value, classNomenclatureNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this class nomenclature name
func (m ClassNomenclatureName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClassNomenclatureNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this class nomenclature name based on context it is used
func (m ClassNomenclatureName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
