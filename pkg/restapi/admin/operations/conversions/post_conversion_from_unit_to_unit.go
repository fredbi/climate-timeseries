// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConversionFromUnitToUnitHandlerFunc turns a function with the right signature into a post conversion from unit to unit handler
type PostConversionFromUnitToUnitHandlerFunc func(PostConversionFromUnitToUnitParams, interface{}) PostConversionFromUnitToUnitResponder

// Handle executing the request and returning a response
func (fn PostConversionFromUnitToUnitHandlerFunc) Handle(params PostConversionFromUnitToUnitParams, principal interface{}) PostConversionFromUnitToUnitResponder {
	return fn(params, principal)
}

// PostConversionFromUnitToUnitHandler interface for that can handle valid post conversion from unit to unit params
type PostConversionFromUnitToUnitHandler interface {
	Handle(PostConversionFromUnitToUnitParams, interface{}) PostConversionFromUnitToUnitResponder
}

// NewPostConversionFromUnitToUnit creates a new http.Handler for the post conversion from unit to unit operation
func NewPostConversionFromUnitToUnit(ctx *middleware.Context, handler PostConversionFromUnitToUnitHandler) *PostConversionFromUnitToUnit {
	return &PostConversionFromUnitToUnit{Context: ctx, Handler: handler}
}

/* PostConversionFromUnitToUnit swagger:route POST /conversion/{fromUnit}/{toUnit} conversions postConversionFromUnitToUnit

Creates add new conversion specification from unit to unit.

*/
type PostConversionFromUnitToUnit struct {
	Context *middleware.Context
	Handler PostConversionFromUnitToUnitHandler
}

func (o *PostConversionFromUnitToUnit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConversionFromUnitToUnitParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
