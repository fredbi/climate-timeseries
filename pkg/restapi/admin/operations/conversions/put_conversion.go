// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutConversionHandlerFunc turns a function with the right signature into a put conversion handler
type PutConversionHandlerFunc func(PutConversionParams, interface{}) PutConversionResponder

// Handle executing the request and returning a response
func (fn PutConversionHandlerFunc) Handle(params PutConversionParams, principal interface{}) PutConversionResponder {
	return fn(params, principal)
}

// PutConversionHandler interface for that can handle valid put conversion params
type PutConversionHandler interface {
	Handle(PutConversionParams, interface{}) PutConversionResponder
}

// NewPutConversion creates a new http.Handler for the put conversion operation
func NewPutConversion(ctx *middleware.Context, handler PutConversionHandler) *PutConversion {
	return &PutConversion{Context: ctx, Handler: handler}
}

/* PutConversion swagger:route PUT /conversion conversions putConversion

Update an existing conversion specification from unit to unit.

*/
type PutConversion struct {
	Context *middleware.Context
	Handler PutConversionHandler
}

func (o *PutConversion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutConversionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
