// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The timeseries admin API allows to maintain the nomenclatures used by Climate Timeseries,\nsuch as units etc.\n\nTimeseries publication status and ownership may be modified.\n\nOnly extra administrative operations are exposed here (e.g. updating nomenclatures).\n\nRegular data retrieval remains carried out by the public API.\n",
    "title": "Climate timeseries - Admin API",
    "termsOfService": "TODO\n",
    "contact": {
      "name": "Frédéric BIDON (Shifter, volunteer)",
      "url": "https://github.com/fredbi",
      "email": "fredbi@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/admin/v1/",
  "paths": {
    "/classes/{classId}": {
      "put": {
        "tags": [
          "classes"
        ],
        "summary": "Update descriptive metadata about a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classDescriptionInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata about nomenclature classes successfully updated.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/classDescription"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/classes/{classId}/members": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Add a new member in a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Class members added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/classes/{classId}/members/{classMemberId}": {
      "put": {
        "tags": [
          "classes"
        ],
        "summary": "Update a member of a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/classMemberInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Class members updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "tags": [
          "classes"
        ],
        "summary": "Removes a member from a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/classMemberInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Class members successfully deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversion": {
      "put": {
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/fromUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/fromUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversion/{fromUnit}/{toUnit}": {
      "put": {
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearerToken": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://myidentityprovider.org/protocol/openid-connect/authorize",
      "tokenUrl": "https://myidentityprovider/protocol/openid-connect/token",
      "scopes": {
        "email": "Authorize the API to inquire about the user's email",
        "openid": "Authorize the API to inquire about standard OpenID claims"
      }
    }
  },
  "security": [
    {
      "bearerToken": []
    }
  ],
  "tags": [
    {
      "description": "Classes represent the various nomenclatures used by the time series, such as\nmeasurement units and data sources.\n",
      "name": "classes",
      "externalDocs": {
        "description": "API concepts: classes.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Unit conversion logic.\n",
      "name": "conversions"
    }
  ],
  "externalDocs": {
    "description": "Climate Timeseries API concepts",
    "url": "https://github.io/wiki/TODO"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The timeseries admin API allows to maintain the nomenclatures used by Climate Timeseries,\nsuch as units etc.\n\nTimeseries publication status and ownership may be modified.\n\nOnly extra administrative operations are exposed here (e.g. updating nomenclatures).\n\nRegular data retrieval remains carried out by the public API.\n",
    "title": "Climate timeseries - Admin API",
    "termsOfService": "TODO\n",
    "contact": {
      "name": "Frédéric BIDON (Shifter, volunteer)",
      "url": "https://github.com/fredbi",
      "email": "fredbi@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/admin/v1/",
  "paths": {
    "/classes/{classId}": {
      "put": {
        "tags": [
          "classes"
        ],
        "summary": "Update descriptive metadata about a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class descriptive metadata.\n",
            "name": "classDescription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/classDescription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata about nomenclature classes successfully updated.\n",
            "schema": {
              "$ref": "#/definitions/classDescription"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/classes/{classId}/members": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Add a new member in a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class members added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/classes/{classId}/members/{classMemberId}": {
      "put": {
        "tags": [
          "classes"
        ],
        "summary": "Update a member of a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a class member.\n",
            "name": "classMemberId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Class members updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "classes"
        ],
        "summary": "Removes a member from a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a class member.\n",
            "name": "classMemberId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Class members successfully deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversion": {
      "put": {
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "query",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "query",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversion/{fromUnit}/{toUnit}": {
      "put": {
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "audit": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedBy": {
          "type": "string"
        }
      },
      "readOnly": true
    },
    "class": {
      "type": "object",
      "required": [
        "id",
        "shortCode",
        "title"
      ],
      "properties": {
        "auditTrail": {
          "$ref": "#/definitions/audit"
        },
        "descriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "descriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "shortCode": {
          "$ref": "#/definitions/className"
        },
        "title": {
          "$ref": "#/definitions/translation"
        }
      },
      "discriminator": "shortCode"
    },
    "classDescription": {
      "description": "Metadata about nomenture classes.\n",
      "type": "object",
      "required": [
        "class",
        "tableName",
        "title",
        "descriptionShort",
        "descriptionLong",
        "metadata"
      ],
      "properties": {
        "class": {
          "$ref": "#/definitions/className"
        },
        "descriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "descriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "metadata": {
          "$ref": "#/definitions/classMetadata"
        },
        "tableName": {
          "type": "string"
        },
        "title": {
          "$ref": "#/definitions/translation"
        }
      }
    },
    "classMetadata": {
      "description": "Metadata used by UIs to render classes.\n",
      "type": "object",
      "properties": {
        "extraFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fromTemplate": {
          "type": "boolean"
        },
        "hasOneClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hasZeroManyClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hasZeroOneClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagSearch": {
          "type": "boolean"
        }
      }
    },
    "className": {
      "enum": [
        "constant",
        "mdimension",
        "mdomain",
        "measurement",
        "munit",
        "multiplier",
        "musystem",
        "ostatus",
        "owner",
        "period",
        "role",
        "source",
        "status",
        "theme",
        "zone",
        "ztype"
      ]
    },
    "conversionSpec": {
      "description": "Unit conversion specification.\n",
      "type": "object",
      "required": [
        "toUnitCode"
      ],
      "properties": {
        "factor": {
          "type": "number",
          "format": "float"
        },
        "formula": {
          "type": "string",
          "x-go-type": {
            "import": {
              "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
            },
            "type": "Formula"
          }
        },
        "intercept": {
          "type": "number",
          "format": "float"
        },
        "reverse_formula": {
          "type": "string",
          "x-go-type": {
            "import": {
              "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
            },
            "type": "Formula"
          }
        },
        "toUnitCode": {
          "type": "string"
        }
      },
      "x-nullable": false
    },
    "translation": {
      "description": "Translation is a multi-language string.\n",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "en": "description example",
        "fr": "exemple de description"
      }
    }
  },
  "securityDefinitions": {
    "bearerToken": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://myidentityprovider.org/protocol/openid-connect/authorize",
      "tokenUrl": "https://myidentityprovider/protocol/openid-connect/token",
      "scopes": {
        "email": "Authorize the API to inquire about the user's email",
        "openid": "Authorize the API to inquire about standard OpenID claims"
      }
    }
  },
  "security": [
    {
      "bearerToken": []
    }
  ],
  "tags": [
    {
      "description": "Classes represent the various nomenclatures used by the time series, such as\nmeasurement units and data sources.\n",
      "name": "classes",
      "externalDocs": {
        "description": "API concepts: classes.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Unit conversion logic.\n",
      "name": "conversions"
    }
  ],
  "externalDocs": {
    "description": "Climate Timeseries API concepts",
    "url": "https://github.io/wiki/TODO"
  }
}`))
}
