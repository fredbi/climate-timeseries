// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetClassesClassIDParams creates a new GetClassesClassIDParams object
//
// There are no default values defined in the spec.
func NewGetClassesClassIDParams() GetClassesClassIDParams {

	return GetClassesClassIDParams{}
}

// GetClassesClassIDParams contains all the bound params for the get classes class ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetClassesClassID
type GetClassesClassIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*When audit is specified, the response will also contain the audit trail field.

	  In: query
	*/
	Audit *bool
	/*When brief is specified, the response will only contain essential data and strip long descriptions.

	  In: query
	*/
	Brief *bool
	/*The internal name of a nomenclature class.

	Valid classes are:
	  * constant: mathematical and physical constants
	  * mdimension: base measured dimensions
	  * mdomain: domains that pertain to measurements
	  * measurement: physical and economic measurements
	  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)
	  * munit: measurement units
	  * musystem: systems of measurement units
	  * ostatus: owner statuses
	  * owner: series owner
	  * period: time series periods (e.g. monthly, yearly...)
	  * role: series owner role
	  * source: data sources
	  * status: series and versions statuses
	  * theme: climate themes
	  * zone: geographical zones
	  * ztype: zone types

	  Required: true
	  In: path
	*/
	ClassID string
	/*When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.

	  In: query
	*/
	Deep *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetClassesClassIDParams() beforehand.
func (o *GetClassesClassIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAudit, qhkAudit, _ := qs.GetOK("audit")
	if err := o.bindAudit(qAudit, qhkAudit, route.Formats); err != nil {
		res = append(res, err)
	}

	qBrief, qhkBrief, _ := qs.GetOK("brief")
	if err := o.bindBrief(qBrief, qhkBrief, route.Formats); err != nil {
		res = append(res, err)
	}

	rClassID, rhkClassID, _ := route.Params.GetOK("classId")
	if err := o.bindClassID(rClassID, rhkClassID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDeep, qhkDeep, _ := qs.GetOK("deep")
	if err := o.bindDeep(qDeep, qhkDeep, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAudit binds and validates parameter Audit from query.
func (o *GetClassesClassIDParams) bindAudit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("audit", "query", "bool", raw)
	}
	o.Audit = &value

	return nil
}

// bindBrief binds and validates parameter Brief from query.
func (o *GetClassesClassIDParams) bindBrief(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("brief", "query", "bool", raw)
	}
	o.Brief = &value

	return nil
}

// bindClassID binds and validates parameter ClassID from path.
func (o *GetClassesClassIDParams) bindClassID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClassID = raw

	if err := o.validateClassID(formats); err != nil {
		return err
	}

	return nil
}

// validateClassID carries on validations for parameter ClassID
func (o *GetClassesClassIDParams) validateClassID(formats strfmt.Registry) error {

	if err := validate.EnumCase("classId", "path", o.ClassID, []interface{}{"constant", "mdimension", "mdomain", "measurement", "multiplier", "munit", "musystem", "ostatus", "owner", "period", "role", "source", "status", "theme", "zone", "ztype"}, true); err != nil {
		return err
	}

	return nil
}

// bindDeep binds and validates parameter Deep from query.
func (o *GetClassesClassIDParams) bindDeep(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("deep", "query", "bool", raw)
	}
	o.Deep = &value

	return nil
}
