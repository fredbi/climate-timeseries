// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/fredbi/climate-timeseries/pkg/auth"
)

// PostClassesClassIDMembersHandlerFunc turns a function with the right signature into a post classes class ID members handler
type PostClassesClassIDMembersHandlerFunc func(PostClassesClassIDMembersParams, auth.Principal) PostClassesClassIDMembersResponder

// Handle executing the request and returning a response
func (fn PostClassesClassIDMembersHandlerFunc) Handle(params PostClassesClassIDMembersParams, principal auth.Principal) PostClassesClassIDMembersResponder {
	return fn(params, principal)
}

// PostClassesClassIDMembersHandler interface for that can handle valid post classes class ID members params
type PostClassesClassIDMembersHandler interface {
	Handle(PostClassesClassIDMembersParams, auth.Principal) PostClassesClassIDMembersResponder
}

// NewPostClassesClassIDMembers creates a new http.Handler for the post classes class ID members operation
func NewPostClassesClassIDMembers(ctx *middleware.Context, handler PostClassesClassIDMembersHandler) *PostClassesClassIDMembers {
	return &PostClassesClassIDMembers{Context: ctx, Handler: handler}
}

/* PostClassesClassIDMembers swagger:route POST /classes/{classId}/members classes postClassesClassIdMembers

Add a new member in a nomenclature class

*/
type PostClassesClassIDMembers struct {
	Context *middleware.Context
	Handler PostClassesClassIDMembersHandler
}

func (o *PostClassesClassIDMembers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostClassesClassIDMembersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal auth.Principal
	if uprinc != nil {
		principal = uprinc.(auth.Principal) // this is really a auth.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
