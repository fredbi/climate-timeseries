// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// NewDeleteClassesClassIDMembersClassMemberIDParams creates a new DeleteClassesClassIDMembersClassMemberIDParams object
//
// There are no default values defined in the spec.
func NewDeleteClassesClassIDMembersClassMemberIDParams() DeleteClassesClassIDMembersClassMemberIDParams {

	return DeleteClassesClassIDMembersClassMemberIDParams{}
}

// DeleteClassesClassIDMembersClassMemberIDParams contains all the bound params for the delete classes class ID members class member ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteClassesClassIDMembersClassMemberID
type DeleteClassesClassIDMembersClassMemberIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The internal name of a nomenclature class.

	Valid classes are:
	  * constant: mathematical and physical constants
	  * mdimension: base measured dimensions
	  * mdomain: domains that pertain to measurements
	  * measurement: physical and economic measurements
	  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)
	  * munit: measurement units
	  * musystem: systems of measurement units
	  * ostatus: owner statuses
	  * owner: series owner
	  * period: time series periods (e.g. monthly, yearly...)
	  * role: series owner role
	  * source: data sources
	  * status: series and versions statuses
	  * theme: climate themes
	  * zone: geographical zones
	  * ztype: zone types

	  Required: true
	  In: path
	*/
	ClassID string
	/*Class member metadata.

	  Required: true
	  In: body
	*/
	ClassMember models.Class
	/*The unique identifier of a class member.

	  Required: true
	  In: path
	*/
	ClassMemberID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteClassesClassIDMembersClassMemberIDParams() beforehand.
func (o *DeleteClassesClassIDMembersClassMemberIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rClassID, rhkClassID, _ := route.Params.GetOK("classId")
	if err := o.bindClassID(rClassID, rhkClassID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		body, err := models.UnmarshalClass(r.Body, route.Consumer)
		if err != nil {
			if err == io.EOF {
				err = errors.Required("classMember", "body", "")
			}
			res = append(res, err)
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ClassMember = body
			}
		}
	} else {
		res = append(res, errors.Required("classMember", "body", ""))
	}

	rClassMemberID, rhkClassMemberID, _ := route.Params.GetOK("classMemberId")
	if err := o.bindClassMemberID(rClassMemberID, rhkClassMemberID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClassID binds and validates parameter ClassID from path.
func (o *DeleteClassesClassIDMembersClassMemberIDParams) bindClassID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClassID = raw

	if err := o.validateClassID(formats); err != nil {
		return err
	}

	return nil
}

// validateClassID carries on validations for parameter ClassID
func (o *DeleteClassesClassIDMembersClassMemberIDParams) validateClassID(formats strfmt.Registry) error {

	if err := validate.EnumCase("classId", "path", o.ClassID, []interface{}{"constant", "mdimension", "mdomain", "measurement", "multiplier", "munit", "musystem", "ostatus", "owner", "period", "role", "source", "status", "theme", "zone", "ztype"}, true); err != nil {
		return err
	}

	return nil
}

// bindClassMemberID binds and validates parameter ClassMemberID from path.
func (o *DeleteClassesClassIDMembersClassMemberIDParams) bindClassMemberID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("classMemberId", "path", "int64", raw)
	}
	o.ClassMemberID = value

	return nil
}
