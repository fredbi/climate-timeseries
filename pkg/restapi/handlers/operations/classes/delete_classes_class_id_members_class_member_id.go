// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/fredbi/climate-timeseries/pkg/auth"
)

// DeleteClassesClassIDMembersClassMemberIDHandlerFunc turns a function with the right signature into a delete classes class ID members class member ID handler
type DeleteClassesClassIDMembersClassMemberIDHandlerFunc func(DeleteClassesClassIDMembersClassMemberIDParams, auth.Principal) DeleteClassesClassIDMembersClassMemberIDResponder

// Handle executing the request and returning a response
func (fn DeleteClassesClassIDMembersClassMemberIDHandlerFunc) Handle(params DeleteClassesClassIDMembersClassMemberIDParams, principal auth.Principal) DeleteClassesClassIDMembersClassMemberIDResponder {
	return fn(params, principal)
}

// DeleteClassesClassIDMembersClassMemberIDHandler interface for that can handle valid delete classes class ID members class member ID params
type DeleteClassesClassIDMembersClassMemberIDHandler interface {
	Handle(DeleteClassesClassIDMembersClassMemberIDParams, auth.Principal) DeleteClassesClassIDMembersClassMemberIDResponder
}

// NewDeleteClassesClassIDMembersClassMemberID creates a new http.Handler for the delete classes class ID members class member ID operation
func NewDeleteClassesClassIDMembersClassMemberID(ctx *middleware.Context, handler DeleteClassesClassIDMembersClassMemberIDHandler) *DeleteClassesClassIDMembersClassMemberID {
	return &DeleteClassesClassIDMembersClassMemberID{Context: ctx, Handler: handler}
}

/* DeleteClassesClassIDMembersClassMemberID swagger:route DELETE /classes/{classId}/members/{classMemberId} classes deleteClassesClassIdMembersClassMemberId

Removes a member from a nomenclature class

*/
type DeleteClassesClassIDMembersClassMemberID struct {
	Context *middleware.Context
	Handler DeleteClassesClassIDMembersClassMemberIDHandler
}

func (o *DeleteClassesClassIDMembersClassMemberID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteClassesClassIDMembersClassMemberIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal auth.Principal
	if uprinc != nil {
		principal = uprinc.(auth.Principal) // this is really a auth.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
