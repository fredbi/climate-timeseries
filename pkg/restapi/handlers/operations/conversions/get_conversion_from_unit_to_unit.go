// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetConversionFromUnitToUnitHandlerFunc turns a function with the right signature into a get conversion from unit to unit handler
type GetConversionFromUnitToUnitHandlerFunc func(GetConversionFromUnitToUnitParams) GetConversionFromUnitToUnitResponder

// Handle executing the request and returning a response
func (fn GetConversionFromUnitToUnitHandlerFunc) Handle(params GetConversionFromUnitToUnitParams) GetConversionFromUnitToUnitResponder {
	return fn(params)
}

// GetConversionFromUnitToUnitHandler interface for that can handle valid get conversion from unit to unit params
type GetConversionFromUnitToUnitHandler interface {
	Handle(GetConversionFromUnitToUnitParams) GetConversionFromUnitToUnitResponder
}

// NewGetConversionFromUnitToUnit creates a new http.Handler for the get conversion from unit to unit operation
func NewGetConversionFromUnitToUnit(ctx *middleware.Context, handler GetConversionFromUnitToUnitHandler) *GetConversionFromUnitToUnit {
	return &GetConversionFromUnitToUnit{Context: ctx, Handler: handler}
}

/* GetConversionFromUnitToUnit swagger:route GET /conversion/{fromUnit}/{toUnit} conversions getConversionFromUnitToUnit

Get the conversion specification from unit to unit.

*/
type GetConversionFromUnitToUnit struct {
	Context *middleware.Context
	Handler GetConversionFromUnitToUnitHandler
}

func (o *GetConversionFromUnitToUnit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetConversionFromUnitToUnitParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
