// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetConversionHandlerFunc turns a function with the right signature into a get conversion handler
type GetConversionHandlerFunc func(GetConversionParams) GetConversionResponder

// Handle executing the request and returning a response
func (fn GetConversionHandlerFunc) Handle(params GetConversionParams) GetConversionResponder {
	return fn(params)
}

// GetConversionHandler interface for that can handle valid get conversion params
type GetConversionHandler interface {
	Handle(GetConversionParams) GetConversionResponder
}

// NewGetConversion creates a new http.Handler for the get conversion operation
func NewGetConversion(ctx *middleware.Context, handler GetConversionHandler) *GetConversion {
	return &GetConversion{Context: ctx, Handler: handler}
}

/* GetConversion swagger:route GET /conversion conversions getConversion

Get the conversion specification from unit to unit.

*/
type GetConversion struct {
	Context *middleware.Context
	Handler GetConversionHandler
}

func (o *GetConversion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetConversionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
