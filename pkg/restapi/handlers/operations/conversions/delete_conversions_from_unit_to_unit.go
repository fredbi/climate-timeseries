// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/fredbi/climate-timeseries/pkg/auth"
)

// DeleteConversionsFromUnitToUnitHandlerFunc turns a function with the right signature into a delete conversions from unit to unit handler
type DeleteConversionsFromUnitToUnitHandlerFunc func(DeleteConversionsFromUnitToUnitParams, auth.Principal) DeleteConversionsFromUnitToUnitResponder

// Handle executing the request and returning a response
func (fn DeleteConversionsFromUnitToUnitHandlerFunc) Handle(params DeleteConversionsFromUnitToUnitParams, principal auth.Principal) DeleteConversionsFromUnitToUnitResponder {
	return fn(params, principal)
}

// DeleteConversionsFromUnitToUnitHandler interface for that can handle valid delete conversions from unit to unit params
type DeleteConversionsFromUnitToUnitHandler interface {
	Handle(DeleteConversionsFromUnitToUnitParams, auth.Principal) DeleteConversionsFromUnitToUnitResponder
}

// NewDeleteConversionsFromUnitToUnit creates a new http.Handler for the delete conversions from unit to unit operation
func NewDeleteConversionsFromUnitToUnit(ctx *middleware.Context, handler DeleteConversionsFromUnitToUnitHandler) *DeleteConversionsFromUnitToUnit {
	return &DeleteConversionsFromUnitToUnit{Context: ctx, Handler: handler}
}

/* DeleteConversionsFromUnitToUnit swagger:route DELETE /conversions/{fromUnit}/{toUnit} conversions deleteConversionsFromUnitToUnit

Delete an existing conversion specification from unit to unit.

*/
type DeleteConversionsFromUnitToUnit struct {
	Context *middleware.Context
	Handler DeleteConversionsFromUnitToUnitHandler
}

func (o *DeleteConversionsFromUnitToUnit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConversionsFromUnitToUnitParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal auth.Principal
	if uprinc != nil {
		principal = uprinc.(auth.Principal) // this is really a auth.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
