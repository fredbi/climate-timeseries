// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetConversionFromUnitToUnitParams creates a new GetConversionFromUnitToUnitParams object
//
// There are no default values defined in the spec.
func NewGetConversionFromUnitToUnitParams() GetConversionFromUnitToUnitParams {

	return GetConversionFromUnitToUnitParams{}
}

// GetConversionFromUnitToUnitParams contains all the bound params for the get conversion from unit to unit operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetConversionFromUnitToUnit
type GetConversionFromUnitToUnitParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*When audit is specified, the response will also contain the audit trail field.

	  In: query
	*/
	Audit *bool
	/*When brief is specified, the response will only contain essential data and strip long descriptions.

	  In: query
	*/
	Brief *bool
	/*When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.

	  In: query
	*/
	Deep *bool
	/*Original unit to be converted.

	  Required: true
	  Max Length: 100
	  Min Length: 1
	  In: path
	*/
	FromUnit string
	/*Original unit to be converted.

	  Required: true
	  Max Length: 100
	  Min Length: 1
	  In: path
	*/
	ToUnit string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetConversionFromUnitToUnitParams() beforehand.
func (o *GetConversionFromUnitToUnitParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAudit, qhkAudit, _ := qs.GetOK("audit")
	if err := o.bindAudit(qAudit, qhkAudit, route.Formats); err != nil {
		res = append(res, err)
	}

	qBrief, qhkBrief, _ := qs.GetOK("brief")
	if err := o.bindBrief(qBrief, qhkBrief, route.Formats); err != nil {
		res = append(res, err)
	}

	qDeep, qhkDeep, _ := qs.GetOK("deep")
	if err := o.bindDeep(qDeep, qhkDeep, route.Formats); err != nil {
		res = append(res, err)
	}

	rFromUnit, rhkFromUnit, _ := route.Params.GetOK("fromUnit")
	if err := o.bindFromUnit(rFromUnit, rhkFromUnit, route.Formats); err != nil {
		res = append(res, err)
	}

	rToUnit, rhkToUnit, _ := route.Params.GetOK("toUnit")
	if err := o.bindToUnit(rToUnit, rhkToUnit, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAudit binds and validates parameter Audit from query.
func (o *GetConversionFromUnitToUnitParams) bindAudit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("audit", "query", "bool", raw)
	}
	o.Audit = &value

	return nil
}

// bindBrief binds and validates parameter Brief from query.
func (o *GetConversionFromUnitToUnitParams) bindBrief(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("brief", "query", "bool", raw)
	}
	o.Brief = &value

	return nil
}

// bindDeep binds and validates parameter Deep from query.
func (o *GetConversionFromUnitToUnitParams) bindDeep(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("deep", "query", "bool", raw)
	}
	o.Deep = &value

	return nil
}

// bindFromUnit binds and validates parameter FromUnit from path.
func (o *GetConversionFromUnitToUnitParams) bindFromUnit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.FromUnit = raw

	if err := o.validateFromUnit(formats); err != nil {
		return err
	}

	return nil
}

// validateFromUnit carries on validations for parameter FromUnit
func (o *GetConversionFromUnitToUnitParams) validateFromUnit(formats strfmt.Registry) error {

	if err := validate.MinLength("fromUnit", "path", o.FromUnit, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("fromUnit", "path", o.FromUnit, 100); err != nil {
		return err
	}

	return nil
}

// bindToUnit binds and validates parameter ToUnit from path.
func (o *GetConversionFromUnitToUnitParams) bindToUnit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ToUnit = raw

	if err := o.validateToUnit(formats); err != nil {
		return err
	}

	return nil
}

// validateToUnit carries on validations for parameter ToUnit
func (o *GetConversionFromUnitToUnitParams) validateToUnit(formats strfmt.Registry) error {

	if err := validate.MinLength("toUnit", "path", o.ToUnit, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("toUnit", "path", o.ToUnit, 100); err != nil {
		return err
	}

	return nil
}
