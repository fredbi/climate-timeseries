// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSearchTagsHandlerFunc turns a function with the right signature into a get search tags handler
type GetSearchTagsHandlerFunc func(GetSearchTagsParams) GetSearchTagsResponder

// Handle executing the request and returning a response
func (fn GetSearchTagsHandlerFunc) Handle(params GetSearchTagsParams) GetSearchTagsResponder {
	return fn(params)
}

// GetSearchTagsHandler interface for that can handle valid get search tags params
type GetSearchTagsHandler interface {
	Handle(GetSearchTagsParams) GetSearchTagsResponder
}

// NewGetSearchTags creates a new http.Handler for the get search tags operation
func NewGetSearchTags(ctx *middleware.Context, handler GetSearchTagsHandler) *GetSearchTags {
	return &GetSearchTags{Context: ctx, Handler: handler}
}

/* GetSearchTags swagger:route GET /search/tags tags getSearchTags

List all known tags

*/
type GetSearchTags struct {
	Context *middleware.Context
	Handler GetSearchTagsHandler
}

func (o *GetSearchTags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSearchTagsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
