// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetSeriesVersionsVersionedSeriesIDValuesParams creates a new GetSeriesVersionsVersionedSeriesIDValuesParams object
//
// There are no default values defined in the spec.
func NewGetSeriesVersionsVersionedSeriesIDValuesParams() GetSeriesVersionsVersionedSeriesIDValuesParams {

	return GetSeriesVersionsVersionedSeriesIDValuesParams{}
}

// GetSeriesVersionsVersionedSeriesIDValuesParams contains all the bound params for the get series versions versioned series ID values operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSeriesVersionsVersionedSeriesIDValues
type GetSeriesVersionsVersionedSeriesIDValuesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Convert *string
	/*Truncates values starting from this date (boundary is included).

	  In: query
	*/
	From *strfmt.DateTime
	/*Truncates values up to this date (boundary is included).

	  In: query
	*/
	To *strfmt.DateTime
	/*The UUID of a version of the time series.
	  Required: true
	  In: path
	*/
	VersionedSeriesID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSeriesVersionsVersionedSeriesIDValuesParams() beforehand.
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qConvert, qhkConvert, _ := qs.GetOK("convert")
	if err := o.bindConvert(qConvert, qhkConvert, route.Formats); err != nil {
		res = append(res, err)
	}

	qFrom, qhkFrom, _ := qs.GetOK("from")
	if err := o.bindFrom(qFrom, qhkFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qTo, qhkTo, _ := qs.GetOK("to")
	if err := o.bindTo(qTo, qhkTo, route.Formats); err != nil {
		res = append(res, err)
	}

	rVersionedSeriesID, rhkVersionedSeriesID, _ := route.Params.GetOK("versionedSeriesId")
	if err := o.bindVersionedSeriesID(rVersionedSeriesID, rhkVersionedSeriesID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindConvert binds and validates parameter Convert from query.
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) bindConvert(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Convert = &raw

	if err := o.validateConvert(formats); err != nil {
		return err
	}

	return nil
}

// validateConvert carries on validations for parameter Convert
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) validateConvert(formats strfmt.Registry) error {

	if err := validate.MinLength("convert", "query", *o.Convert, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("convert", "query", *o.Convert, 100); err != nil {
		return err
	}

	return nil
}

// bindFrom binds and validates parameter From from query.
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) bindFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("from", "query", "strfmt.DateTime", raw)
	}
	o.From = (value.(*strfmt.DateTime))

	if err := o.validateFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateFrom carries on validations for parameter From
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) validateFrom(formats strfmt.Registry) error {

	if err := validate.FormatOf("from", "query", "date-time", o.From.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTo binds and validates parameter To from query.
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("to", "query", "strfmt.DateTime", raw)
	}
	o.To = (value.(*strfmt.DateTime))

	if err := o.validateTo(formats); err != nil {
		return err
	}

	return nil
}

// validateTo carries on validations for parameter To
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) validateTo(formats strfmt.Registry) error {

	if err := validate.FormatOf("to", "query", "date-time", o.To.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindVersionedSeriesID binds and validates parameter VersionedSeriesID from path.
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) bindVersionedSeriesID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("versionedSeriesId", "path", "strfmt.UUID", raw)
	}
	o.VersionedSeriesID = *(value.(*strfmt.UUID))

	if err := o.validateVersionedSeriesID(formats); err != nil {
		return err
	}

	return nil
}

// validateVersionedSeriesID carries on validations for parameter VersionedSeriesID
func (o *GetSeriesVersionsVersionedSeriesIDValuesParams) validateVersionedSeriesID(formats strfmt.Registry) error {

	if err := validate.FormatOf("versionedSeriesId", "path", "uuid", o.VersionedSeriesID.String(), formats); err != nil {
		return err
	}
	return nil
}
