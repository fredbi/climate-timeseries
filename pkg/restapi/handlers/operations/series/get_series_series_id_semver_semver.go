// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSeriesSeriesIDSemverSemverHandlerFunc turns a function with the right signature into a get series series ID semver semver handler
type GetSeriesSeriesIDSemverSemverHandlerFunc func(GetSeriesSeriesIDSemverSemverParams) GetSeriesSeriesIDSemverSemverResponder

// Handle executing the request and returning a response
func (fn GetSeriesSeriesIDSemverSemverHandlerFunc) Handle(params GetSeriesSeriesIDSemverSemverParams) GetSeriesSeriesIDSemverSemverResponder {
	return fn(params)
}

// GetSeriesSeriesIDSemverSemverHandler interface for that can handle valid get series series ID semver semver params
type GetSeriesSeriesIDSemverSemverHandler interface {
	Handle(GetSeriesSeriesIDSemverSemverParams) GetSeriesSeriesIDSemverSemverResponder
}

// NewGetSeriesSeriesIDSemverSemver creates a new http.Handler for the get series series ID semver semver operation
func NewGetSeriesSeriesIDSemverSemver(ctx *middleware.Context, handler GetSeriesSeriesIDSemverSemverHandler) *GetSeriesSeriesIDSemverSemver {
	return &GetSeriesSeriesIDSemverSemver{Context: ctx, Handler: handler}
}

/* GetSeriesSeriesIDSemverSemver swagger:route GET /series/{seriesId}/semver/{semver} series semver getSeriesSeriesIdSemverSemver

Get a version of a time series with a semver tag

Semver tags follow semantic versioning rules (e.g. v1.2.3, v1.2.3-rc1, v1.3.0 ...).

Unless requested by the query parameters, the time series values are not returned by default.


*/
type GetSeriesSeriesIDSemverSemver struct {
	Context *middleware.Context
	Handler GetSeriesSeriesIDSemverSemverHandler
}

func (o *GetSeriesSeriesIDSemverSemver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSeriesSeriesIDSemverSemverParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
