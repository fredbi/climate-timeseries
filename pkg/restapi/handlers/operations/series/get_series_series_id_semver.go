// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSeriesSeriesIDSemverHandlerFunc turns a function with the right signature into a get series series ID semver handler
type GetSeriesSeriesIDSemverHandlerFunc func(GetSeriesSeriesIDSemverParams) GetSeriesSeriesIDSemverResponder

// Handle executing the request and returning a response
func (fn GetSeriesSeriesIDSemverHandlerFunc) Handle(params GetSeriesSeriesIDSemverParams) GetSeriesSeriesIDSemverResponder {
	return fn(params)
}

// GetSeriesSeriesIDSemverHandler interface for that can handle valid get series series ID semver params
type GetSeriesSeriesIDSemverHandler interface {
	Handle(GetSeriesSeriesIDSemverParams) GetSeriesSeriesIDSemverResponder
}

// NewGetSeriesSeriesIDSemver creates a new http.Handler for the get series series ID semver operation
func NewGetSeriesSeriesIDSemver(ctx *middleware.Context, handler GetSeriesSeriesIDSemverHandler) *GetSeriesSeriesIDSemver {
	return &GetSeriesSeriesIDSemver{Context: ctx, Handler: handler}
}

/* GetSeriesSeriesIDSemver swagger:route GET /series/{seriesId}/semver series semver getSeriesSeriesIdSemver

Get all semver tags associated to a series

*/
type GetSeriesSeriesIDSemver struct {
	Context *middleware.Context
	Handler GetSeriesSeriesIDSemverHandler
}

func (o *GetSeriesSeriesIDSemver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSeriesSeriesIDSemverParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
