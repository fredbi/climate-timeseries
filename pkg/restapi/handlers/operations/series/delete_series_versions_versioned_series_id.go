// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteSeriesVersionsVersionedSeriesIDHandlerFunc turns a function with the right signature into a delete series versions versioned series ID handler
type DeleteSeriesVersionsVersionedSeriesIDHandlerFunc func(DeleteSeriesVersionsVersionedSeriesIDParams) DeleteSeriesVersionsVersionedSeriesIDResponder

// Handle executing the request and returning a response
func (fn DeleteSeriesVersionsVersionedSeriesIDHandlerFunc) Handle(params DeleteSeriesVersionsVersionedSeriesIDParams) DeleteSeriesVersionsVersionedSeriesIDResponder {
	return fn(params)
}

// DeleteSeriesVersionsVersionedSeriesIDHandler interface for that can handle valid delete series versions versioned series ID params
type DeleteSeriesVersionsVersionedSeriesIDHandler interface {
	Handle(DeleteSeriesVersionsVersionedSeriesIDParams) DeleteSeriesVersionsVersionedSeriesIDResponder
}

// NewDeleteSeriesVersionsVersionedSeriesID creates a new http.Handler for the delete series versions versioned series ID operation
func NewDeleteSeriesVersionsVersionedSeriesID(ctx *middleware.Context, handler DeleteSeriesVersionsVersionedSeriesIDHandler) *DeleteSeriesVersionsVersionedSeriesID {
	return &DeleteSeriesVersionsVersionedSeriesID{Context: ctx, Handler: handler}
}

/* DeleteSeriesVersionsVersionedSeriesID swagger:route DELETE /series/versions/{versionedSeriesId} series versioning deleteSeriesVersionsVersionedSeriesId

Deletes a version of a time series

Only the original owner of this version of the series may delete it.

All values associated to that version are deleted.


*/
type DeleteSeriesVersionsVersionedSeriesID struct {
	Context *middleware.Context
	Handler DeleteSeriesVersionsVersionedSeriesIDHandler
}

func (o *DeleteSeriesVersionsVersionedSeriesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteSeriesVersionsVersionedSeriesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
