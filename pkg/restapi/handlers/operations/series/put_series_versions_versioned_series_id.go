// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSeriesVersionsVersionedSeriesIDHandlerFunc turns a function with the right signature into a put series versions versioned series ID handler
type PutSeriesVersionsVersionedSeriesIDHandlerFunc func(PutSeriesVersionsVersionedSeriesIDParams) PutSeriesVersionsVersionedSeriesIDResponder

// Handle executing the request and returning a response
func (fn PutSeriesVersionsVersionedSeriesIDHandlerFunc) Handle(params PutSeriesVersionsVersionedSeriesIDParams) PutSeriesVersionsVersionedSeriesIDResponder {
	return fn(params)
}

// PutSeriesVersionsVersionedSeriesIDHandler interface for that can handle valid put series versions versioned series ID params
type PutSeriesVersionsVersionedSeriesIDHandler interface {
	Handle(PutSeriesVersionsVersionedSeriesIDParams) PutSeriesVersionsVersionedSeriesIDResponder
}

// NewPutSeriesVersionsVersionedSeriesID creates a new http.Handler for the put series versions versioned series ID operation
func NewPutSeriesVersionsVersionedSeriesID(ctx *middleware.Context, handler PutSeriesVersionsVersionedSeriesIDHandler) *PutSeriesVersionsVersionedSeriesID {
	return &PutSeriesVersionsVersionedSeriesID{Context: ctx, Handler: handler}
}

/* PutSeriesVersionsVersionedSeriesID swagger:route PUT /series/versions/{versionedSeriesId} series versioning putSeriesVersionsVersionedSeriesId

Updates the metadata of version of a time series

This endpoint replaces the metadata for the requested version, without creating a new version.

Only the owners of the time series may modify values.


*/
type PutSeriesVersionsVersionedSeriesID struct {
	Context *middleware.Context
	Handler PutSeriesVersionsVersionedSeriesIDHandler
}

func (o *PutSeriesVersionsVersionedSeriesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutSeriesVersionsVersionedSeriesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
