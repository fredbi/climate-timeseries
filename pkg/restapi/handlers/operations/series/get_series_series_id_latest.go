// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSeriesSeriesIDLatestHandlerFunc turns a function with the right signature into a get series series ID latest handler
type GetSeriesSeriesIDLatestHandlerFunc func(GetSeriesSeriesIDLatestParams) GetSeriesSeriesIDLatestResponder

// Handle executing the request and returning a response
func (fn GetSeriesSeriesIDLatestHandlerFunc) Handle(params GetSeriesSeriesIDLatestParams) GetSeriesSeriesIDLatestResponder {
	return fn(params)
}

// GetSeriesSeriesIDLatestHandler interface for that can handle valid get series series ID latest params
type GetSeriesSeriesIDLatestHandler interface {
	Handle(GetSeriesSeriesIDLatestParams) GetSeriesSeriesIDLatestResponder
}

// NewGetSeriesSeriesIDLatest creates a new http.Handler for the get series series ID latest operation
func NewGetSeriesSeriesIDLatest(ctx *middleware.Context, handler GetSeriesSeriesIDLatestHandler) *GetSeriesSeriesIDLatest {
	return &GetSeriesSeriesIDLatest{Context: ctx, Handler: handler}
}

/* GetSeriesSeriesIDLatest swagger:route GET /series/{seriesId}/latest series getSeriesSeriesIdLatest

Get the latest version of the description of a time series

The latest version is determined according to semantic versioning rules (e.g. v1.2.3 < v1.2.4).

Unless requested by the query parameters, the time series values are not returned by default.


*/
type GetSeriesSeriesIDLatest struct {
	Context *middleware.Context
	Handler GetSeriesSeriesIDLatestHandler
}

func (o *GetSeriesSeriesIDLatest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSeriesSeriesIDLatestParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
