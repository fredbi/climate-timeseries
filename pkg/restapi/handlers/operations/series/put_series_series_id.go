// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSeriesSeriesIDHandlerFunc turns a function with the right signature into a put series series ID handler
type PutSeriesSeriesIDHandlerFunc func(PutSeriesSeriesIDParams) PutSeriesSeriesIDResponder

// Handle executing the request and returning a response
func (fn PutSeriesSeriesIDHandlerFunc) Handle(params PutSeriesSeriesIDParams) PutSeriesSeriesIDResponder {
	return fn(params)
}

// PutSeriesSeriesIDHandler interface for that can handle valid put series series ID params
type PutSeriesSeriesIDHandler interface {
	Handle(PutSeriesSeriesIDParams) PutSeriesSeriesIDResponder
}

// NewPutSeriesSeriesID creates a new http.Handler for the put series series ID operation
func NewPutSeriesSeriesID(ctx *middleware.Context, handler PutSeriesSeriesIDHandler) *PutSeriesSeriesID {
	return &PutSeriesSeriesID{Context: ctx, Handler: handler}
}

/* PutSeriesSeriesID swagger:route PUT /series/{seriesId} series putSeriesSeriesId

Updates metadata about a time series

This action only updates metadata about the series (such as associated themes, tags, etc) and does not create a new version.

Only owners registered for a series may update the series.

Any time series values specified in the input are ignored. One must update a specific version to modify the values of a time series.


*/
type PutSeriesSeriesID struct {
	Context *middleware.Context
	Handler PutSeriesSeriesIDHandler
}

func (o *PutSeriesSeriesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutSeriesSeriesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
