// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostSeriesHandlerFunc turns a function with the right signature into a post series handler
type PostSeriesHandlerFunc func(PostSeriesParams) PostSeriesResponder

// Handle executing the request and returning a response
func (fn PostSeriesHandlerFunc) Handle(params PostSeriesParams) PostSeriesResponder {
	return fn(params)
}

// PostSeriesHandler interface for that can handle valid post series params
type PostSeriesHandler interface {
	Handle(PostSeriesParams) PostSeriesResponder
}

// NewPostSeries creates a new http.Handler for the post series operation
func NewPostSeries(ctx *middleware.Context, handler PostSeriesHandler) *PostSeries {
	return &PostSeries{Context: ctx, Handler: handler}
}

/* PostSeries swagger:route POST /series series postSeries

Creates a new time series

This creates a new time time series.

If some values are specified, the initial version for the new series is created with these values.


*/
type PostSeries struct {
	Context *middleware.Context
	Handler PostSeriesHandler
}

func (o *PostSeries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostSeriesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
