// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostSeriesSeriesIDHandlerFunc turns a function with the right signature into a post series series ID handler
type PostSeriesSeriesIDHandlerFunc func(PostSeriesSeriesIDParams) PostSeriesSeriesIDResponder

// Handle executing the request and returning a response
func (fn PostSeriesSeriesIDHandlerFunc) Handle(params PostSeriesSeriesIDParams) PostSeriesSeriesIDResponder {
	return fn(params)
}

// PostSeriesSeriesIDHandler interface for that can handle valid post series series ID params
type PostSeriesSeriesIDHandler interface {
	Handle(PostSeriesSeriesIDParams) PostSeriesSeriesIDResponder
}

// NewPostSeriesSeriesID creates a new http.Handler for the post series series ID operation
func NewPostSeriesSeriesID(ctx *middleware.Context, handler PostSeriesSeriesIDHandler) *PostSeriesSeriesID {
	return &PostSeriesSeriesID{Context: ctx, Handler: handler}
}

/* PostSeriesSeriesID swagger:route POST /series/{seriesId} series postSeriesSeriesId

Creates a new version of a time series

*/
type PostSeriesSeriesID struct {
	Context *middleware.Context
	Handler PostSeriesSeriesIDHandler
}

func (o *PostSeriesSeriesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostSeriesSeriesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
