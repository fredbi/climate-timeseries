// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetSeriesURL generates an URL for the get series operation
type GetSeriesURL struct {
	Datasource *string
	Email      *string
	Glob       *string
	OwnerID    *strfmt.UUID
	Status     *string
	Tag        *string
	Tags       []string
	Theme      *string
	Zone       *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetSeriesURL) WithBasePath(bp string) *GetSeriesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetSeriesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetSeriesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/series"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/v1/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var datasourceQ string
	if o.Datasource != nil {
		datasourceQ = *o.Datasource
	}
	if datasourceQ != "" {
		qs.Set("datasource", datasourceQ)
	}

	var emailQ string
	if o.Email != nil {
		emailQ = *o.Email
	}
	if emailQ != "" {
		qs.Set("email", emailQ)
	}

	var globQ string
	if o.Glob != nil {
		globQ = *o.Glob
	}
	if globQ != "" {
		qs.Set("glob", globQ)
	}

	var ownerIDQ string
	if o.OwnerID != nil {
		ownerIDQ = o.OwnerID.String()
	}
	if ownerIDQ != "" {
		qs.Set("ownerId", ownerIDQ)
	}

	var statusQ string
	if o.Status != nil {
		statusQ = *o.Status
	}
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	var tagQ string
	if o.Tag != nil {
		tagQ = *o.Tag
	}
	if tagQ != "" {
		qs.Set("tag", tagQ)
	}

	var tagsIR []string
	for _, tagsI := range o.Tags {
		tagsIS := tagsI
		if tagsIS != "" {
			tagsIR = append(tagsIR, tagsIS)
		}
	}

	tags := swag.JoinByFormat(tagsIR, "csv")

	if len(tags) > 0 {
		qsv := tags[0]
		if qsv != "" {
			qs.Set("tags", qsv)
		}
	}

	var themeQ string
	if o.Theme != nil {
		themeQ = *o.Theme
	}
	if themeQ != "" {
		qs.Set("theme", themeQ)
	}

	var zoneQ string
	if o.Zone != nil {
		zoneQ = *o.Zone
	}
	if zoneQ != "" {
		qs.Set("zone", zoneQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetSeriesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetSeriesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetSeriesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetSeriesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetSeriesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetSeriesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
