// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetSeriesParams creates a new GetSeriesParams object
//
// There are no default values defined in the spec.
func NewGetSeriesParams() GetSeriesParams {

	return GetSeriesParams{}
}

// GetSeriesParams contains all the bound params for the get series operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSeries
type GetSeriesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A datasource short code to be searched for.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Datasource *string
	/*Refers to some data owner by email.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Email *string
	/*Filters the result according to a glob pattern applied on the short name of the requested object.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Glob *string
	/*The ID of the contributor.

	  In: query
	*/
	OwnerID *strfmt.UUID
	/*Filter the result according to a given status.

	Only series in the "PUBLISHED" status are returned to the public.

	Series owner may consult their series in any status.

	  In: query
	*/
	Status *string
	/*Filter the result by search for a given keyword, whenever tag search is applicable.

	This parameter has no effect on objects where tag search is not applicable.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Tag *string
	/*Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.

	Up to 5 tags can be searched.

	This parameter has no effect on objects where tag search is not applicable.

	  Max Items: 5
	  Unique: true
	  In: query
	  Collection Format: csv
	*/
	Tags []string
	/*A theme path (url-encoded) to be searched for.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Theme *string
	/*A zone short code (url-encoded) to be searched for.

	  Max Length: 100
	  Min Length: 1
	  In: query
	*/
	Zone *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSeriesParams() beforehand.
func (o *GetSeriesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDatasource, qhkDatasource, _ := qs.GetOK("datasource")
	if err := o.bindDatasource(qDatasource, qhkDatasource, route.Formats); err != nil {
		res = append(res, err)
	}

	qEmail, qhkEmail, _ := qs.GetOK("email")
	if err := o.bindEmail(qEmail, qhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	qGlob, qhkGlob, _ := qs.GetOK("glob")
	if err := o.bindGlob(qGlob, qhkGlob, route.Formats); err != nil {
		res = append(res, err)
	}

	qOwnerID, qhkOwnerID, _ := qs.GetOK("ownerId")
	if err := o.bindOwnerID(qOwnerID, qhkOwnerID, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qTag, qhkTag, _ := qs.GetOK("tag")
	if err := o.bindTag(qTag, qhkTag, route.Formats); err != nil {
		res = append(res, err)
	}

	qTags, qhkTags, _ := qs.GetOK("tags")
	if err := o.bindTags(qTags, qhkTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qTheme, qhkTheme, _ := qs.GetOK("theme")
	if err := o.bindTheme(qTheme, qhkTheme, route.Formats); err != nil {
		res = append(res, err)
	}

	qZone, qhkZone, _ := qs.GetOK("zone")
	if err := o.bindZone(qZone, qhkZone, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDatasource binds and validates parameter Datasource from query.
func (o *GetSeriesParams) bindDatasource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Datasource = &raw

	if err := o.validateDatasource(formats); err != nil {
		return err
	}

	return nil
}

// validateDatasource carries on validations for parameter Datasource
func (o *GetSeriesParams) validateDatasource(formats strfmt.Registry) error {

	if err := validate.MinLength("datasource", "query", *o.Datasource, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("datasource", "query", *o.Datasource, 100); err != nil {
		return err
	}

	return nil
}

// bindEmail binds and validates parameter Email from query.
func (o *GetSeriesParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Email = &raw

	if err := o.validateEmail(formats); err != nil {
		return err
	}

	return nil
}

// validateEmail carries on validations for parameter Email
func (o *GetSeriesParams) validateEmail(formats strfmt.Registry) error {

	if err := validate.MinLength("email", "query", *o.Email, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "query", *o.Email, 100); err != nil {
		return err
	}

	return nil
}

// bindGlob binds and validates parameter Glob from query.
func (o *GetSeriesParams) bindGlob(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Glob = &raw

	if err := o.validateGlob(formats); err != nil {
		return err
	}

	return nil
}

// validateGlob carries on validations for parameter Glob
func (o *GetSeriesParams) validateGlob(formats strfmt.Registry) error {

	if err := validate.MinLength("glob", "query", *o.Glob, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("glob", "query", *o.Glob, 100); err != nil {
		return err
	}

	return nil
}

// bindOwnerID binds and validates parameter OwnerID from query.
func (o *GetSeriesParams) bindOwnerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("ownerId", "query", "strfmt.UUID", raw)
	}
	o.OwnerID = (value.(*strfmt.UUID))

	if err := o.validateOwnerID(formats); err != nil {
		return err
	}

	return nil
}

// validateOwnerID carries on validations for parameter OwnerID
func (o *GetSeriesParams) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.FormatOf("ownerId", "query", "uuid", o.OwnerID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetSeriesParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetSeriesParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.EnumCase("status", "query", *o.Status, []interface{}{"VALIDATED", "PUBLISHED", "REJECTED", "PENDINGV", "PENDINGP"}, true); err != nil {
		return err
	}

	return nil
}

// bindTag binds and validates parameter Tag from query.
func (o *GetSeriesParams) bindTag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Tag = &raw

	if err := o.validateTag(formats); err != nil {
		return err
	}

	return nil
}

// validateTag carries on validations for parameter Tag
func (o *GetSeriesParams) validateTag(formats strfmt.Registry) error {

	if err := validate.MinLength("tag", "query", *o.Tag, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("tag", "query", *o.Tag, 100); err != nil {
		return err
	}

	return nil
}

// bindTags binds and validates array parameter Tags from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetSeriesParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvTags string
	if len(rawData) > 0 {
		qvTags = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	tagsIC := swag.SplitByFormat(qvTags, "csv")
	if len(tagsIC) == 0 {
		return nil
	}

	var tagsIR []string
	for i, tagsIV := range tagsIC {
		tagsI := tagsIV

		if err := validate.MinLength(fmt.Sprintf("%s.%v", "tags", i), "query", tagsI, 1); err != nil {
			return err
		}

		if err := validate.MaxLength(fmt.Sprintf("%s.%v", "tags", i), "query", tagsI, 100); err != nil {
			return err
		}

		tagsIR = append(tagsIR, tagsI)
	}

	o.Tags = tagsIR
	if err := o.validateTags(formats); err != nil {
		return err
	}

	return nil
}

// validateTags carries on validations for parameter Tags
func (o *GetSeriesParams) validateTags(formats strfmt.Registry) error {

	tagsSize := int64(len(o.Tags))

	// maxItems: 5
	if err := validate.MaxItems("tags", "query", tagsSize, 5); err != nil {
		return err
	}

	// uniqueItems: true
	if err := validate.UniqueItems("tags", "query", o.Tags); err != nil {
		return err
	}
	return nil
}

// bindTheme binds and validates parameter Theme from query.
func (o *GetSeriesParams) bindTheme(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Theme = &raw

	if err := o.validateTheme(formats); err != nil {
		return err
	}

	return nil
}

// validateTheme carries on validations for parameter Theme
func (o *GetSeriesParams) validateTheme(formats strfmt.Registry) error {

	if err := validate.MinLength("theme", "query", *o.Theme, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("theme", "query", *o.Theme, 100); err != nil {
		return err
	}

	return nil
}

// bindZone binds and validates parameter Zone from query.
func (o *GetSeriesParams) bindZone(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Zone = &raw

	if err := o.validateZone(formats); err != nil {
		return err
	}

	return nil
}

// validateZone carries on validations for parameter Zone
func (o *GetSeriesParams) validateZone(formats strfmt.Registry) error {

	if err := validate.MinLength("zone", "query", *o.Zone, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("zone", "query", *o.Zone, 100); err != nil {
		return err
	}

	return nil
}
