// Code generated by go-swagger; DO NOT EDIT.

package handlers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API allows the public to search and consult time series about climate change research\nconducted by TheShiftProject.\n\nThe climate time series API allows contributors to upload time series about their climate\nchange models and studies.\n\nOther secured endpoints allows admins to maintain the nomenclatures used by the climate\ntime series, such as units etc. Timeseries publication status and ownership is for now managed by admins.\n",
    "title": "Climate time series API",
    "termsOfService": "TODO\n",
    "contact": {
      "name": "Frédéric BIDON (Shifter, volunteer)",
      "url": "https://github.com/fredbi",
      "email": "fredbi@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/v1/",
  "paths": {
    "/classes": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get all valid nomenclature classes",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/globInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of nomenclature classes.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "timeseries-models.yaml#/definitions/class"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/classes/{classId}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get metadata about a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Descriptive metadata about nomenclature classes.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/classDescription"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "put": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Update descriptive metadata about a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classDescriptionInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata about nomenclature classes successfully updated.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/classDescription"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/classes/{classId}/members": {
      "get": {
        "description": "Returns a a collection of nomenclature class members.\n\nExample:\n  GET /classes/munit/members returns all measurement units.\n\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "classes"
        ],
        "summary": "Get all the members of a nomenclature class",
        "externalDocs": {
          "description": "API responses: nomenclature values\n",
          "url": "https://github.io/wiki/TODO#classcsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/globInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/tagInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/tagsInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Nomenclature class members.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "timeseries-models.yaml#/definitions/class"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Add a new member in a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Class members added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/classes/{classId}/members/{classMemberId}": {
      "put": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Update a member of a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/classMemberInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Class members updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Removes a member from a nomenclature class",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/classInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/classMemberInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/classMemberInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Class members successfully deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversion": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "Get the conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/fromUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A unit conversion specification\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/conversion"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversion/{fromUnit}/{toUnit}": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "Get the conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A unit conversion specification\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/conversionSpec"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversions": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "List available unit conversions, with some query filters",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/fromUnitInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toUnitInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Available unit conversions\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "timeseries-models.yaml#/definitions/conversion"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/conversions/{fromUnit}/{toUnit}": {
      "put": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/conversionInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly create resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerToken": [
              "openid",
              "email"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Delete an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/fromUnitInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/toUnitInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/search/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List all known tags",
        "responses": {
          "200": {
            "description": "All known search tags.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/search/tags/{tag}": {
      "get": {
        "description": "This endpoint returns mulitple entities, such as classes or series.\n",
        "tags": [
          "tags"
        ],
        "summary": "Search all entities with some tag",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/tagInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/statusInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/ownerInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/emailInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "All entities that match the searched tag.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/entities"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series": {
      "get": {
        "tags": [
          "series"
        ],
        "summary": "Get all available series, with search filters",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inquery/globInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/tagInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/tagsInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/themeInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/zoneInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/statusInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/ownerInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/dataSourceInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/emailInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Available climate timeseries.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "timeseries-models.yaml#/definitions/series"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "description": "This creates a new time time series.\n\nIf some values are specified, the initial version for the new series is created with these values.\n",
        "tags": [
          "series"
        ],
        "summary": "Creates a new time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inbody/seriesInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Series successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource, whenever applicable.\n"
              },
              "X-VersionID": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the newly created versioned resource, whenever applicable.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/versions/{versionedSeriesId}": {
      "get": {
        "description": "Unless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Get a version of a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Description of a given version of a time series.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/versionedSeries"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "put": {
        "description": "This endpoint replaces the metadata for the requested version, without creating a new version.\n\nOnly the owners of the time series may modify values.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Updates the metadata of version of a time series",
        "externalDocs": {
          "description": "API inputs: time series version.\n",
          "url": "https://github.io/wiki/TODO#seriesversion"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/versionedSeriesInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Time series values successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-VersionID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "description": "A conflict is reported if the version was already attributed to a version of the same series. Use PUT to update existing values.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "creates a new version of a time series",
        "externalDocs": {
          "description": "API inputs: time series version.\n",
          "url": "https://github.io/wiki/TODO#seriesversion"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/versionedSeriesInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Time series version successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "description": "Only the original owner of this version of the series may delete it.\n\nAll values associated to that version are deleted.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Deletes a version of a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Version of the time series successfully deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/versions/{versionedSeriesId}/values": {
      "get": {
        "description": "If the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Get the values of version of a time series",
        "externalDocs": {
          "description": "API responses: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/fromInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/convertInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Values of a given version of a time series.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/tsValues"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "put": {
        "description": "This endpoint replaces time series values for the requested version, without creating a new version.\n\nOnly the owners of the time series may modify values.\n\nA conflict is reported if values were already attributed to this version. Use PUT to update existing values.\n\nIf the request negotiates a request MIME type with text/csv (with the Content-Type header),\nthis endpoint consumes a CSV file.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Replaces the values of version of a time series",
        "externalDocs": {
          "description": "API responses: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/valuesInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Time series values successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-VersionID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "description": "This endpoint creates time series values for the latest version.\n\nOnly the owners of the time series may add values.\n\nA conflict is reported if values were already attributed to this version. Use PUT to update existing values.\n\nIf the request negotiates a request MIME type with text/csv (with the Content-Type header),\nthis endpoint consumes a CSV file.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Uploads values to the version of a time series",
        "externalDocs": {
          "description": "API inputs: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/valuesInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Time series values successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "description": "Only the original owner of this version of the series may delete it.\n\nThe version is not deleted. Only the values associated to that version are deleted.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Deletes the values attached to a version of a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/versionedSeriesInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Values of the versioned time series successfully deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}": {
      "get": {
        "tags": [
          "series"
        ],
        "summary": "Get all versions of a time series.",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/globInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/statusInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "All available versions of a climate timeseries.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "timeseries-models.yaml#/definitions/versionedSeries"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "put": {
        "description": "This action only updates metadata about the series (such as associated themes, tags, etc) and does not create a new version.\n\nOnly owners registered for a series may update the series.\n\nAny time series values specified in the input are ignored. One must update a specific version to modify the values of a time series.\n",
        "tags": [
          "series"
        ],
        "summary": "Updates metadata about a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/seriesInBody"
          }
        ],
        "responses": {
          "204": {
            "description": "Series successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "post": {
        "tags": [
          "series"
        ],
        "summary": "Creates a new version of a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inbody/seriesInBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Series version successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource.\n"
              },
              "X-VersionID": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the newly created versioned resource.\n"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "409": {
            "$ref": "responses.yaml#/responses/conflict"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      },
      "delete": {
        "description": "All versions and values associated to this series are deleted.\n\nOnly the original owner of a series may delete it.\n",
        "tags": [
          "series"
        ],
        "summary": "Deletes a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Series successfully deleted.\n"
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}/latest": {
      "get": {
        "description": "The latest version is determined according to semantic versioning rules (e.g. v1.2.3 \u003c v1.2.4).\n\nUnless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series"
        ],
        "summary": "Get the latest version of the description of a time series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/statusInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Latest available version of a time series.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/versionedSeries"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}/latest/values": {
      "get": {
        "description": "The latest version is determined according to semantic versioning rules (e.g. v1.2.3 \u003c v1.2.4).\n\nValues are returned in chronological order.\n\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series"
        ],
        "summary": "Get the values from the latest version of a time series",
        "externalDocs": {
          "description": "API responses: time series values\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/fromInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/convertInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Time series values.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/tsValues"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}/semver": {
      "get": {
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get all semver tags associated to a series",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "All semver tagged versions available for a time series.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}/semver/{semver}": {
      "get": {
        "description": "Semver tags follow semantic versioning rules (e.g. v1.2.3, v1.2.3-rc1, v1.3.0 ...).\n\nUnless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get a version of a time series with a semver tag",
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/semverInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/deepInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/briefInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/auditInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Versioned time series for a given semver tag.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/versionedSeries"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    },
    "/series/{seriesId}/semver/{semver}/values": {
      "get": {
        "description": "\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get the values of version of a time series with a semver tag",
        "externalDocs": {
          "description": "API responses: time series values\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "$ref": "parameters.yaml#/params/inpath/seriesInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inpath/semverInPath"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/fromInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/toInQuery"
          },
          {
            "$ref": "parameters.yaml#/params/inquery/convertInQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Values of a given version of a time series.\n",
            "schema": {
              "$ref": "timeseries-models.yaml#/definitions/tsValues"
            }
          },
          "400": {
            "$ref": "responses.yaml#/responses/badRequest"
          },
          "401": {
            "$ref": "responses.yaml#/responses/unauthorized"
          },
          "403": {
            "$ref": "responses.yaml#/responses/forbidden"
          },
          "404": {
            "$ref": "responses.yaml#/responses/notfound"
          },
          "405": {
            "$ref": "responses.yaml#/responses/notAllowed"
          },
          "500": {
            "$ref": "responses.yaml#/responses/internalError"
          },
          "default": {
            "$ref": "responses.yaml#/responses/otherError"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "description": "API keys are intended to allow for a programmatic use of the API, letting clients consume endpoints.\n\nThis is required for contributors who would like to interact with the API through, say, a R or python client,\nor from they Jupyter python console.\n",
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    },
    "bearerToken": {
      "description": "The oauth2 security scheme is used to authenticate contributors, based on some external\nidentity providers (e.g. Google, github, facebook...).\n\nWe need one such definition for a given identity provider, unless we setup a proxy OIDC with federated identity.\n",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://myidentityprovider.org/protocol/openid-connect/authorize",
      "tokenUrl": "https://myidentityprovider/protocol/openid-connect/token",
      "scopes": {
        "email": "Authorize our API to inquire about the user's email",
        "openid": "Authorize our API to inquire about standard OpenID claims"
      }
    }
  },
  "tags": [
    {
      "description": "Classes represent the various nomenclatures used by the time series, such as\nmeasurement units and data sources.\n",
      "name": "classes",
      "externalDocs": {
        "description": "API concepts: classes.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Series represent time series of measurements.\n",
      "name": "series",
      "externalDocs": {
        "description": "API concepts: series.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Tags are keywords that may be used to search and classify series, data source and climate themes.\n",
      "name": "tags",
      "externalDocs": {
        "description": "API concepts: tags.\n",
        "url": "https://github.io/wiki/TODO#tags"
      }
    },
    {
      "description": "Timeseries are versioned.\n",
      "name": "versioning",
      "externalDocs": {
        "description": "API concepts: series versioning\n",
        "url": "https://github.io/wiki/TODO#versions"
      }
    },
    {
      "description": "Semantic version tags (\"semver\") identify a checked-in time series.\n",
      "name": "semver",
      "externalDocs": {
        "description": "API concepts: semver.\n",
        "url": "https://github.io/wiki/TODO#semver"
      }
    },
    {
      "description": "Unit conversion logic.\n",
      "name": "conversions",
      "externalDocs": {
        "description": "API concepts: unit conversions.\n",
        "url": "https://github.io/wiki/TODO#unitconversions"
      }
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The API allows the public to search and consult time series about climate change research\nconducted by TheShiftProject.\n\nThe climate time series API allows contributors to upload time series about their climate\nchange models and studies.\n\nOther secured endpoints allows admins to maintain the nomenclatures used by the climate\ntime series, such as units etc. Timeseries publication status and ownership is for now managed by admins.\n",
    "title": "Climate time series API",
    "termsOfService": "TODO\n",
    "contact": {
      "name": "Frédéric BIDON (Shifter, volunteer)",
      "url": "https://github.com/fredbi",
      "email": "fredbi@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/v1/",
  "paths": {
    "/classes": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get all valid nomenclature classes",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filters the result according to a glob pattern applied on the short name of the requested object.\n",
            "name": "glob",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of nomenclature classes.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/class"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/classes/{classId}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get metadata about a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Descriptive metadata about nomenclature classes.\n",
            "schema": {
              "$ref": "#/definitions/classDescription"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Update descriptive metadata about a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class descriptive metadata.\n",
            "name": "classDescription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/classDescription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata about nomenclature classes successfully updated.\n",
            "schema": {
              "$ref": "#/definitions/classDescription"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/classes/{classId}/members": {
      "get": {
        "description": "Returns a a collection of nomenclature class members.\n\nExample:\n  GET /classes/munit/members returns all measurement units.\n\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "classes"
        ],
        "summary": "Get all the members of a nomenclature class",
        "externalDocs": {
          "description": "API responses: nomenclature values\n",
          "url": "https://github.io/wiki/TODO#classcsv"
        },
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filters the result according to a glob pattern applied on the short name of the requested object.\n",
            "name": "glob",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filter the result by search for a given keyword, whenever tag search is applicable.\n\nThis parameter has no effect on objects where tag search is not applicable.\n",
            "name": "tag",
            "in": "query"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.\n\nUp to 5 tags can be searched.\n\nThis parameter has no effect on objects where tag search is not applicable.\n",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Nomenclature class members.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/class"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Add a new member in a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class members added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/classes/{classId}/members/{classMemberId}": {
      "put": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Update a member of a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a class member.\n",
            "name": "classMemberId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Class members updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "classes"
        ],
        "summary": "Removes a member from a nomenclature class",
        "parameters": [
          {
            "enum": [
              "constant",
              "mdimension",
              "mdomain",
              "measurement",
              "multiplier",
              "munit",
              "musystem",
              "ostatus",
              "owner",
              "period",
              "role",
              "source",
              "status",
              "theme",
              "zone",
              "ztype"
            ],
            "type": "string",
            "description": "The internal name of a nomenclature class.\n\nValid classes are:\n  * constant: mathematical and physical constants\n  * mdimension: base measured dimensions\n  * mdomain: domains that pertain to measurements\n  * measurement: physical and economic measurements\n  * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)\n  * munit: measurement units\n  * musystem: systems of measurement units\n  * ostatus: owner statuses\n  * owner: series owner\n  * period: time series periods (e.g. monthly, yearly...)\n  * role: series owner role\n  * source: data sources\n  * status: series and versions statuses\n  * theme: climate themes\n  * zone: geographical zones\n  * ztype: zone types\n",
            "name": "classId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a class member.\n",
            "name": "classMemberId",
            "in": "path",
            "required": true
          },
          {
            "description": "Class member metadata.\n",
            "name": "classMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/class"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Class members successfully deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversion": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "Get the conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Target unit result of the conversion.\n",
            "name": "toUnit",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A unit conversion specification\n",
            "schema": {
              "$ref": "#/definitions/conversion"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversion/{fromUnit}/{toUnit}": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "Get the conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A unit conversion specification\n",
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversions": {
      "get": {
        "tags": [
          "conversions"
        ],
        "summary": "List available unit conversions, with some query filters",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Target unit result of the conversion.\n",
            "name": "toUnit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Available unit conversions\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conversion"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/conversions/{fromUnit}/{toUnit}": {
      "put": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Update an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion updated.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Creates add new conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          },
          {
            "description": "Unit conversion specification.\n",
            "name": "conversionSpec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conversionSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Unit conversion added.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly create resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerToken": [
              "email",
              "openid"
            ]
          },
          {
            "apiKey": []
          }
        ],
        "tags": [
          "conversions"
        ],
        "summary": "Delete an existing conversion specification from unit to unit.",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "fromUnit",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Original unit to be converted.\n",
            "name": "toUnit",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Unit conversion deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/search/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List all known tags",
        "responses": {
          "200": {
            "description": "All known search tags.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/search/tags/{tag}": {
      "get": {
        "description": "This endpoint returns mulitple entities, such as classes or series.\n",
        "tags": [
          "tags"
        ],
        "summary": "Search all entities with some tag",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filter the result by search for a given keyword, whenever tag search is applicable.\n\nThis parameter has no effect on objects where tag search is not applicable.\n",
            "name": "tag",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "VALIDATED",
              "PUBLISHED",
              "REJECTED",
              "PENDINGV",
              "PENDINGP"
            ],
            "type": "string",
            "description": "Filter the result according to a given status.\n\nOnly series in the \"PUBLISHED\" status are returned to the public.\n\nSeries owner may consult their series in any status.\n",
            "name": "status",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the contributor.\n",
            "name": "ownerId",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Refers to some data owner by email.\n",
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All entities that match the searched tag.\n",
            "schema": {
              "$ref": "#/definitions/entities"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series": {
      "get": {
        "tags": [
          "series"
        ],
        "summary": "Get all available series, with search filters",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filters the result according to a glob pattern applied on the short name of the requested object.\n",
            "name": "glob",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filter the result by search for a given keyword, whenever tag search is applicable.\n\nThis parameter has no effect on objects where tag search is not applicable.\n",
            "name": "tag",
            "in": "query"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.\n\nUp to 5 tags can be searched.\n\nThis parameter has no effect on objects where tag search is not applicable.\n",
            "name": "tags",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "A theme path (url-encoded) to be searched for.\n",
            "name": "theme",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "A zone short code (url-encoded) to be searched for.\n",
            "name": "zone",
            "in": "query"
          },
          {
            "enum": [
              "VALIDATED",
              "PUBLISHED",
              "REJECTED",
              "PENDINGV",
              "PENDINGP"
            ],
            "type": "string",
            "description": "Filter the result according to a given status.\n\nOnly series in the \"PUBLISHED\" status are returned to the public.\n\nSeries owner may consult their series in any status.\n",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the contributor.\n",
            "name": "ownerId",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "A datasource short code to be searched for.\n",
            "name": "datasource",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Refers to some data owner by email.\n",
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Available climate timeseries.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/series"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "description": "This creates a new time time series.\n\nIf some values are specified, the initial version for the new series is created with these values.\n",
        "tags": [
          "series"
        ],
        "summary": "Creates a new time series",
        "parameters": [
          {
            "description": "The description of a time series.\n",
            "name": "series",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/series"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Series successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the newly created resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource, whenever applicable.\n"
              },
              "X-VersionID": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the newly created versioned resource, whenever applicable.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/versions/{versionedSeriesId}": {
      "get": {
        "description": "Unless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Get a version of a time series",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Description of a given version of a time series.\n",
            "schema": {
              "$ref": "#/definitions/versionedSeries"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint replaces the metadata for the requested version, without creating a new version.\n\nOnly the owners of the time series may modify values.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Updates the metadata of version of a time series",
        "externalDocs": {
          "description": "API inputs: time series version.\n",
          "url": "https://github.io/wiki/TODO#seriesversion"
        },
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The description of a version of a time series.\n",
            "name": "versionSeries",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/versionedSeries"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Time series values successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-VersionID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "description": "A conflict is reported if the version was already attributed to a version of the same series. Use PUT to update existing values.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "creates a new version of a time series",
        "externalDocs": {
          "description": "API inputs: time series version.\n",
          "url": "https://github.io/wiki/TODO#seriesversion"
        },
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The description of a version of a time series.\n",
            "name": "versionSeries",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/versionedSeries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Time series version successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "Only the original owner of this version of the series may delete it.\n\nAll values associated to that version are deleted.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Deletes a version of a time series",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Version of the time series successfully deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/versions/{versionedSeriesId}/values": {
      "get": {
        "description": "If the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Get the values of version of a time series",
        "externalDocs": {
          "description": "API responses: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values starting from this date (boundary is included).\n",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values up to this date (boundary is included).\n",
            "name": "to",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit.\n",
            "name": "convert",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Values of a given version of a time series.\n",
            "schema": {
              "$ref": "#/definitions/tsValues"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint replaces time series values for the requested version, without creating a new version.\n\nOnly the owners of the time series may modify values.\n\nA conflict is reported if values were already attributed to this version. Use PUT to update existing values.\n\nIf the request negotiates a request MIME type with text/csv (with the Content-Type header),\nthis endpoint consumes a CSV file.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Replaces the values of version of a time series",
        "externalDocs": {
          "description": "API responses: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The values of a time series\n",
            "name": "values",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tsValues"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Time series values successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-VersionID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint creates time series values for the latest version.\n\nOnly the owners of the time series may add values.\n\nA conflict is reported if values were already attributed to this version. Use PUT to update existing values.\n\nIf the request negotiates a request MIME type with text/csv (with the Content-Type header),\nthis endpoint consumes a CSV file.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Uploads values to the version of a time series",
        "externalDocs": {
          "description": "API inputs: time series values.\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The values of a time series\n",
            "name": "values",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tsValues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Time series values successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "Only the original owner of this version of the series may delete it.\n\nThe version is not deleted. Only the values associated to that version are deleted.\n",
        "tags": [
          "series",
          "versioning"
        ],
        "summary": "Deletes the values attached to a version of a time series",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of a version of the time series.",
            "name": "versionedSeriesId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Values of the versioned time series successfully deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}": {
      "get": {
        "tags": [
          "series"
        ],
        "summary": "Get all versions of a time series.",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Filters the result according to a glob pattern applied on the short name of the requested object.\n",
            "name": "glob",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          },
          {
            "enum": [
              "VALIDATED",
              "PUBLISHED",
              "REJECTED",
              "PENDINGV",
              "PENDINGP"
            ],
            "type": "string",
            "description": "Filter the result according to a given status.\n\nOnly series in the \"PUBLISHED\" status are returned to the public.\n\nSeries owner may consult their series in any status.\n",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All available versions of a climate timeseries.\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/versionedSeries"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "put": {
        "description": "This action only updates metadata about the series (such as associated themes, tags, etc) and does not create a new version.\n\nOnly owners registered for a series may update the series.\n\nAny time series values specified in the input are ignored. One must update a specific version to modify the values of a time series.\n",
        "tags": [
          "series"
        ],
        "summary": "Updates metadata about a time series",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The description of a time series.\n",
            "name": "series",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/series"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Series successfully updated.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the updated resource.\n"
              },
              "X-ID": {
                "type": "integer",
                "format": "int64",
                "description": "The ID of the updated resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "series"
        ],
        "summary": "Creates a new version of a time series",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "description": "The description of a time series.\n",
            "name": "series",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/series"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Series version successfully created.\n\nCheck the response headers to retrieve this resource.\n",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource.\n"
              },
              "X-LocationVersion": {
                "type": "string",
                "format": "uri",
                "description": "The URI of the newly created versioned resource.\n"
              },
              "X-VersionID": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the newly created versioned resource.\n"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "409": {
            "description": "Resource already exists. An object creation was requested, but this object was already existing.\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "All versions and values associated to this series are deleted.\n\nOnly the original owner of a series may delete it.\n",
        "tags": [
          "series"
        ],
        "summary": "Deletes a time series",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Series successfully deleted.\n"
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}/latest": {
      "get": {
        "description": "The latest version is determined according to semantic versioning rules (e.g. v1.2.3 \u003c v1.2.4).\n\nUnless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series"
        ],
        "summary": "Get the latest version of the description of a time series",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          },
          {
            "enum": [
              "VALIDATED",
              "PUBLISHED",
              "REJECTED",
              "PENDINGV",
              "PENDINGP"
            ],
            "type": "string",
            "description": "Filter the result according to a given status.\n\nOnly series in the \"PUBLISHED\" status are returned to the public.\n\nSeries owner may consult their series in any status.\n",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Latest available version of a time series.\n",
            "schema": {
              "$ref": "#/definitions/versionedSeries"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}/latest/values": {
      "get": {
        "description": "The latest version is determined according to semantic versioning rules (e.g. v1.2.3 \u003c v1.2.4).\n\nValues are returned in chronological order.\n\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series"
        ],
        "summary": "Get the values from the latest version of a time series",
        "externalDocs": {
          "description": "API responses: time series values\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values starting from this date (boundary is included).\n",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values up to this date (boundary is included).\n",
            "name": "to",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit.\n",
            "name": "convert",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Time series values.\n",
            "schema": {
              "$ref": "#/definitions/tsValues"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}/semver": {
      "get": {
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get all semver tags associated to a series",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All semver tagged versions available for a time series.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}/semver/{semver}": {
      "get": {
        "description": "Semver tags follow semantic versioning rules (e.g. v1.2.3, v1.2.3-rc1, v1.3.0 ...).\n\nUnless requested by the query parameters, the time series values are not returned by default.\n",
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get a version of a time series with a semver tag",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The semver tag of a series' version.",
            "name": "semver",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.\n",
            "name": "deep",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When brief is specified, the response will only contain essential data and strip long descriptions.\n",
            "name": "brief",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When audit is specified, the response will also contain the audit trail field.\n",
            "name": "audit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Versioned time series for a given semver tag.\n",
            "schema": {
              "$ref": "#/definitions/versionedSeries"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/series/{seriesId}/semver/{semver}/values": {
      "get": {
        "description": "\nIf the request negotiates a response MIME type with text/csv (with the Accept header),\nthis endpoint produces a CSV file.\n",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "series",
          "semver"
        ],
        "summary": "Get the values of version of a time series with a semver tag",
        "externalDocs": {
          "description": "API responses: time series values\n",
          "url": "https://github.io/wiki/TODO#seriescsv"
        },
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a time series.",
            "name": "seriesId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The semver tag of a series' version.",
            "name": "semver",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values starting from this date (boundary is included).\n",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Truncates values up to this date (boundary is included).\n",
            "name": "to",
            "in": "query"
          },
          {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit.\n",
            "name": "convert",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Values of a given version of a time series.\n",
            "schema": {
              "$ref": "#/definitions/tsValues"
            }
          },
          "400": {
            "description": "Client error in request. Input did not pass validations. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "401": {
            "description": "Unauthorized access for a lack of authentication\n"
          },
          "403": {
            "description": "Forbidden access for a lack of sufficient privileges\n"
          },
          "404": {
            "description": "Resource not found. The object requested does not exist or is not visible to the user.\n"
          },
          "405": {
            "description": "MethodNotAllowed\n"
          },
          "500": {
            "description": "An internal error has occured. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          },
          "default": {
            "description": "Other error. See error details.\n",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "audit": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedBy": {
          "type": "string"
        }
      },
      "readOnly": true
    },
    "class": {
      "type": "object",
      "required": [
        "id",
        "shortCode",
        "title"
      ],
      "properties": {
        "auditTrail": {
          "$ref": "#/definitions/audit"
        },
        "descriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "descriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "shortCode": {
          "$ref": "#/definitions/className"
        },
        "title": {
          "$ref": "#/definitions/translation"
        }
      },
      "discriminator": "shortCode"
    },
    "classDescription": {
      "description": "Metadata about nomenture classes.\n",
      "type": "object",
      "required": [
        "class",
        "tableName",
        "title",
        "descriptionShort",
        "descriptionLong",
        "metadata"
      ],
      "properties": {
        "class": {
          "$ref": "#/definitions/className"
        },
        "descriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "descriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "metadata": {
          "$ref": "#/definitions/classMetadata"
        },
        "tableName": {
          "type": "string"
        },
        "title": {
          "$ref": "#/definitions/translation"
        }
      }
    },
    "classMetadata": {
      "description": "Metadata used by UIs to render classes.\n",
      "type": "object",
      "properties": {
        "extraFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fromTemplate": {
          "type": "boolean"
        },
        "hasOneClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hasZeroManyClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hasZeroOneClass": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagSearch": {
          "type": "boolean"
        }
      }
    },
    "className": {
      "enum": [
        "constant",
        "mdimension",
        "mdomain",
        "measurement",
        "munit",
        "multiplier",
        "musystem",
        "ostatus",
        "owner",
        "period",
        "role",
        "source",
        "status",
        "theme",
        "zone",
        "ztype"
      ]
    },
    "compositeUnit": {
      "description": "A composite measurement unit is built from base units with a formula.\nTODO doc.\n",
      "type": "object",
      "additionalProperties": true,
      "example": {}
    },
    "conversion": {
      "description": "Unit conversions.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "fromUnit",
            "toUnit"
          ],
          "properties": {
            "auditTrail": {
              "$ref": "#/definitions/audit"
            },
            "fromUnit": {
              "$ref": "#/definitions/munit"
            },
            "toUnit": {
              "$ref": "#/definitions/munit"
            }
          }
        },
        {
          "$ref": "#/definitions/conversionSpec"
        }
      ]
    },
    "conversionSpec": {
      "description": "Unit conversion specification.\n",
      "type": "object",
      "required": [
        "toUnitCode"
      ],
      "properties": {
        "factor": {
          "type": "number",
          "format": "float"
        },
        "formula": {
          "type": "string",
          "x-go-type": {
            "import": {
              "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
            },
            "type": "Formula"
          }
        },
        "intercept": {
          "type": "number",
          "format": "float"
        },
        "reverse_formula": {
          "type": "string",
          "x-go-type": {
            "import": {
              "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
            },
            "type": "Formula"
          }
        },
        "toUnitCode": {
          "type": "string"
        }
      },
      "x-nullable": false
    },
    "document": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "x-nullable": false
    },
    "documents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/document"
      }
    },
    "entities": {
      "type": "array",
      "items": {
        "type": "object"
      },
      "x-go-type": {
        "import": {
          "alias": "polymorphs",
          "package": "github.com/fredbi/climate-timeseries/pkg/restapi/models/polymorphs"
        },
        "type": "Entities"
      }
    },
    "extra": {
      "description": "reserved for future use",
      "type": "object",
      "additionalProperties": true
    },
    "geometry": {
      "description": "A geojson geometry.\n",
      "type": "object",
      "additionalProperties": true
    },
    "mdomain": {
      "description": "Measurement domains: this is a domain in which a kind of measurement applies.\n\nExamples:\n  Measuring speed is useful in aeronautics and mechanics, but not so much in construction.\n\n  Torque is used in mechanics but not so much in chemistry.\n\nDomains also apply to constants.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    },
    "measurement": {
      "description": "A measurement refers to any physical or economic measurement, the unit notwithstanding.\n\nExamples:\n  * speed\n  * temperature\n\nWe introduce \"quantity\" to take into account measurement that count things, as well as \"currency\"\nto take into account measurements of economic facts.\n\nMeasurements usually refer to one or several physical (or economic) dimensions.\n\nExample:\n  speed is homogeneous to \"L^T-1\"\n\nHowever, some measurements are without dimension, such as \"QUANTITY\" and \"ANGLE\".\n\nSeries of ratios (e.g. % increase of GDP) are not considered measurements. They shall use special units which do not refer to measurements.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "properties": {
            "dimensions": {
              "type": "string",
              "x-go-type": {
                "import": {
                  "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra/expressions"
                },
                "type": "DimensionsFormula"
              }
            },
            "measurementHasMeasurementDomains": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mdomain"
              }
            }
          }
        }
      ],
      "x-nullable": false
    },
    "multiplier": {
      "description": "Multipliers using to prefix measurement units (e.g. m,c,d,da,h,k,M,G...).\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    },
    "mumeta": {
      "description": "Measurement units metadata, for rendering (symbol glyphs, aliases...)\n",
      "type": "object",
      "properties": {
        "extra": {
          "$ref": "#/definitions/extra"
        }
      }
    },
    "munit": {
      "description": "Measurement units are used to quantify values provided by time series.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "required": [
            "isStandard"
          ],
          "properties": {
            "includedMultiplier": {
              "$ref": "#/definitions/multiplier"
            },
            "isStandard": {
              "type": "boolean"
            },
            "measurementUnitHasConversions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conversionSpec"
              }
            },
            "metadata": {
              "$ref": "#/definitions/mumeta"
            },
            "unitMeasurement": {
              "$ref": "#/definitions/measurement"
            },
            "unitMeasurementSystem": {
              "$ref": "#/definitions/musystem"
            }
          }
        }
      ],
      "x-nullable": false
    },
    "musystem": {
      "description": "Measurement unit systems.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    },
    "ostatus": {
      "description": "Status of owners.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    },
    "owner": {
      "description": "Owners are the maintainers of timeseries and nomenclatures.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "required": [
            "uuid",
            "name",
            "email",
            "ownerStatus"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "ownerStatus": {
              "$ref": "#/definitions/ostatus"
            },
            "uuid": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            }
          }
        }
      ],
      "x-nullable": false
    },
    "period": {
      "description": "A period describe the periodicity of a time series, e.g. quarterly, yearly, ...\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    },
    "searchTags": {
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 100,
        "minLength": 1
      }
    },
    "semver": {
      "type": "string",
      "x-go-type": {
        "import": {
          "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra"
        },
        "type": "Semver"
      }
    },
    "series": {
      "description": "A time series.\n\nThe brief description omits descriptionLong, statusChangeReason, tags, linkedDocuments and auditTrail.\n\nThe field auditTrail is read-only and requires the \"audit\" query parameter to be retrieved.\n\nThe field seriesHasVersions requires the \"deep\" query parameter to be retrieved.\n",
      "type": "object",
      "required": [
        "id",
        "title",
        "measurementUnit",
        "timePeriod",
        "status",
        "zone",
        "dataSource"
      ],
      "properties": {
        "auditTrail": {
          "$ref": "#/definitions/audit"
        },
        "dataSource": {
          "$ref": "#/definitions/source"
        },
        "descriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "descriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "id": {
          "type": "integer"
        },
        "inputComposedUnit": {
          "$ref": "#/definitions/compositeUnit"
        },
        "linkedDocuments": {
          "$ref": "#/definitions/documents"
        },
        "measurementUnit": {
          "$ref": "#/definitions/munit"
        },
        "seriesHasOwners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/owner"
          }
        },
        "seriesHasThemes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/theme"
          }
        },
        "seriesHasVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/versionedSeries"
          }
        },
        "status": {
          "$ref": "#/definitions/vstatus"
        },
        "statusChangeReason": {
          "$ref": "#/definitions/translation"
        },
        "tags": {
          "$ref": "#/definitions/searchTags"
        },
        "timePeriod": {
          "$ref": "#/definitions/period"
        },
        "title": {
          "$ref": "#/definitions/translation"
        },
        "zone": {
          "$ref": "#/definitions/zone"
        }
      }
    },
    "source": {
      "description": "Data sources.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "properties": {
            "rating": {
              "type": "integer",
              "format": "int64",
              "maximum": 10,
              "minimum": 0
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              }
            }
          }
        }
      ],
      "x-nullable": false
    },
    "theme": {
      "description": "Climate themes.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "properties": {
            "linkedDocuments": {
              "$ref": "#/definitions/documents"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              }
            }
          }
        }
      ],
      "x-nullable": false
    },
    "translation": {
      "description": "Translation is a multi-language string.\n",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "en": "description example",
        "fr": "exemple de description"
      }
    },
    "ts": {
      "type": "string",
      "format": "date-time",
      "x-go-type": {
        "import": {
          "package": "github.com/fredbi/climate-timeseries/pkg/restapi/extra"
        },
        "type": "Timestamp"
      }
    },
    "tsValue": {
      "type": "object",
      "properties": {
        "t": {
          "$ref": "#/definitions/ts"
        },
        "v": {
          "type": "number",
          "format": "float"
        }
      },
      "x-nullable": false
    },
    "tsValues": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tsValue"
      }
    },
    "versionedSeries": {
      "description": "A version of a time series.\n\nThe brief description omits versionDescriptionLong, versionStatusChangeReason, tags, linkedDocuments and auditTrail.\n\nThe field auditTrail is read-only and requires the \"audit\" query parameter to be retrieved.\n\nThe field timeseries requires the \"deep\" query parameter to be retrieved.\n",
      "type": "object",
      "required": [
        "version",
        "versionedId",
        "versionStatus"
      ],
      "properties": {
        "auditTrail": {
          "$ref": "#/definitions/audit"
        },
        "formula": {
          "type": "string"
        },
        "parentVersionedId": {
          "type": "string",
          "format": "uuid"
        },
        "timeseries": {
          "$ref": "#/definitions/tsValues"
        },
        "version": {
          "$ref": "#/definitions/semver"
        },
        "versionDescriptionLong": {
          "$ref": "#/definitions/translation"
        },
        "versionDescriptionShort": {
          "$ref": "#/definitions/translation"
        },
        "versionOwner": {
          "type": "string",
          "format": "uuid"
        },
        "versionStatus": {
          "$ref": "#/definitions/vstatus"
        },
        "versionStatusChangeReason": {
          "$ref": "#/definitions/translation"
        },
        "versionTitle": {
          "$ref": "#/definitions/translation"
        },
        "versionedId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        }
      },
      "x-nullable": false
    },
    "vstatus": {
      "type": "string",
      "enum": [
        "VALIDATED",
        "PUBLISHED",
        "REJECTED",
        "PENDINGV",
        "PENDINGP"
      ]
    },
    "zone": {
      "description": "Geographical zones.\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "type": "object",
          "required": [
            "zoneType"
          ],
          "properties": {
            "zoneGeometry": {
              "$ref": "#/definitions/geometry"
            },
            "zoneType": {
              "$ref": "#/definitions/ztype"
            }
          }
        }
      ],
      "x-nullable": false
    },
    "ztype": {
      "description": "Typology of geographical zones (e.g. world, country, ...)\n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/class"
        },
        {
          "$ref": "#/definitions/extra"
        }
      ],
      "x-nullable": false
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "description": "API keys are intended to allow for a programmatic use of the API, letting clients consume endpoints.\n\nThis is required for contributors who would like to interact with the API through, say, a R or python client,\nor from they Jupyter python console.\n",
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    },
    "bearerToken": {
      "description": "The oauth2 security scheme is used to authenticate contributors, based on some external\nidentity providers (e.g. Google, github, facebook...).\n\nWe need one such definition for a given identity provider, unless we setup a proxy OIDC with federated identity.\n",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://myidentityprovider.org/protocol/openid-connect/authorize",
      "tokenUrl": "https://myidentityprovider/protocol/openid-connect/token",
      "scopes": {
        "email": "Authorize our API to inquire about the user's email",
        "openid": "Authorize our API to inquire about standard OpenID claims"
      }
    }
  },
  "tags": [
    {
      "description": "Classes represent the various nomenclatures used by the time series, such as\nmeasurement units and data sources.\n",
      "name": "classes",
      "externalDocs": {
        "description": "API concepts: classes.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Series represent time series of measurements.\n",
      "name": "series",
      "externalDocs": {
        "description": "API concepts: series.\n",
        "url": "https://github.io/wiki/TODO"
      }
    },
    {
      "description": "Tags are keywords that may be used to search and classify series, data source and climate themes.\n",
      "name": "tags",
      "externalDocs": {
        "description": "API concepts: tags.\n",
        "url": "https://github.io/wiki/TODO#tags"
      }
    },
    {
      "description": "Timeseries are versioned.\n",
      "name": "versioning",
      "externalDocs": {
        "description": "API concepts: series versioning\n",
        "url": "https://github.io/wiki/TODO#versions"
      }
    },
    {
      "description": "Semantic version tags (\"semver\") identify a checked-in time series.\n",
      "name": "semver",
      "externalDocs": {
        "description": "API concepts: semver.\n",
        "url": "https://github.io/wiki/TODO#semver"
      }
    },
    {
      "description": "Unit conversion logic.\n",
      "name": "conversions",
      "externalDocs": {
        "description": "API concepts: unit conversions.\n",
        "url": "https://github.io/wiki/TODO#unitconversions"
      }
    }
  ]
}`))
}
