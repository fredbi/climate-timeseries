// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSeriesParams creates a new GetSeriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSeriesParams() *GetSeriesParams {
	return &GetSeriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSeriesParamsWithTimeout creates a new GetSeriesParams object
// with the ability to set a timeout on a request.
func NewGetSeriesParamsWithTimeout(timeout time.Duration) *GetSeriesParams {
	return &GetSeriesParams{
		timeout: timeout,
	}
}

// NewGetSeriesParamsWithContext creates a new GetSeriesParams object
// with the ability to set a context for a request.
func NewGetSeriesParamsWithContext(ctx context.Context) *GetSeriesParams {
	return &GetSeriesParams{
		Context: ctx,
	}
}

// NewGetSeriesParamsWithHTTPClient creates a new GetSeriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSeriesParamsWithHTTPClient(client *http.Client) *GetSeriesParams {
	return &GetSeriesParams{
		HTTPClient: client,
	}
}

/* GetSeriesParams contains all the parameters to send to the API endpoint
   for the get series operation.

   Typically these are written to a http.Request.
*/
type GetSeriesParams struct {

	/* Datasource.

	   A datasource short code to be searched for.

	*/
	Datasource *string

	/* Email.

	   Refers to some data owner by email.

	*/
	Email *string

	/* Glob.

	   Filters the result according to a glob pattern applied on the short name of the requested object.

	*/
	Glob *string

	/* OwnerID.

	   The ID of the contributor.


	   Format: uuid
	*/
	OwnerID *strfmt.UUID

	/* Status.

	     Filter the result according to a given status.

	Only series in the "PUBLISHED" status are returned to the public.

	Series owner may consult their series in any status.

	*/
	Status *string

	/* Tag.

	     Filter the result by search for a given keyword, whenever tag search is applicable.

	This parameter has no effect on objects where tag search is not applicable.

	*/
	Tag *string

	/* Tags.

	     Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.

	Up to 5 tags can be searched.

	This parameter has no effect on objects where tag search is not applicable.

	*/
	Tags []string

	/* Theme.

	   A theme path (url-encoded) to be searched for.

	*/
	Theme *string

	/* Zone.

	   A zone short code (url-encoded) to be searched for.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get series params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSeriesParams) WithDefaults() *GetSeriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get series params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSeriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get series params
func (o *GetSeriesParams) WithTimeout(timeout time.Duration) *GetSeriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get series params
func (o *GetSeriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get series params
func (o *GetSeriesParams) WithContext(ctx context.Context) *GetSeriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get series params
func (o *GetSeriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get series params
func (o *GetSeriesParams) WithHTTPClient(client *http.Client) *GetSeriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get series params
func (o *GetSeriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatasource adds the datasource to the get series params
func (o *GetSeriesParams) WithDatasource(datasource *string) *GetSeriesParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the get series params
func (o *GetSeriesParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithEmail adds the email to the get series params
func (o *GetSeriesParams) WithEmail(email *string) *GetSeriesParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get series params
func (o *GetSeriesParams) SetEmail(email *string) {
	o.Email = email
}

// WithGlob adds the glob to the get series params
func (o *GetSeriesParams) WithGlob(glob *string) *GetSeriesParams {
	o.SetGlob(glob)
	return o
}

// SetGlob adds the glob to the get series params
func (o *GetSeriesParams) SetGlob(glob *string) {
	o.Glob = glob
}

// WithOwnerID adds the ownerID to the get series params
func (o *GetSeriesParams) WithOwnerID(ownerID *strfmt.UUID) *GetSeriesParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the get series params
func (o *GetSeriesParams) SetOwnerID(ownerID *strfmt.UUID) {
	o.OwnerID = ownerID
}

// WithStatus adds the status to the get series params
func (o *GetSeriesParams) WithStatus(status *string) *GetSeriesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get series params
func (o *GetSeriesParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the get series params
func (o *GetSeriesParams) WithTag(tag *string) *GetSeriesParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get series params
func (o *GetSeriesParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTags adds the tags to the get series params
func (o *GetSeriesParams) WithTags(tags []string) *GetSeriesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get series params
func (o *GetSeriesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithTheme adds the theme to the get series params
func (o *GetSeriesParams) WithTheme(theme *string) *GetSeriesParams {
	o.SetTheme(theme)
	return o
}

// SetTheme adds the theme to the get series params
func (o *GetSeriesParams) SetTheme(theme *string) {
	o.Theme = theme
}

// WithZone adds the zone to the get series params
func (o *GetSeriesParams) WithZone(zone *string) *GetSeriesParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get series params
func (o *GetSeriesParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetSeriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string

		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {

			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.Glob != nil {

		// query param glob
		var qrGlob string

		if o.Glob != nil {
			qrGlob = *o.Glob
		}
		qGlob := qrGlob
		if qGlob != "" {

			if err := r.SetQueryParam("glob", qGlob); err != nil {
				return err
			}
		}
	}

	if o.OwnerID != nil {

		// query param ownerId
		var qrOwnerID strfmt.UUID

		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID.String()
		if qOwnerID != "" {

			if err := r.SetQueryParam("ownerId", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if o.Theme != nil {

		// query param theme
		var qrTheme string

		if o.Theme != nil {
			qrTheme = *o.Theme
		}
		qTheme := qrTheme
		if qTheme != "" {

			if err := r.SetQueryParam("theme", qTheme); err != nil {
				return err
			}
		}
	}

	if o.Zone != nil {

		// query param zone
		var qrZone string

		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {

			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSeries binds the parameter tags
func (o *GetSeriesParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "csv"
	tagsIS := swag.JoinByFormat(tagsIC, "csv")

	return tagsIS
}
