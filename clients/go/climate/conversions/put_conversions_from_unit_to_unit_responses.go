// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// PutConversionsFromUnitToUnitReader is a Reader for the PutConversionsFromUnitToUnit structure.
type PutConversionsFromUnitToUnitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversionsFromUnitToUnitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutConversionsFromUnitToUnitNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversionsFromUnitToUnitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversionsFromUnitToUnitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversionsFromUnitToUnitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversionsFromUnitToUnitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPutConversionsFromUnitToUnitMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversionsFromUnitToUnitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutConversionsFromUnitToUnitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutConversionsFromUnitToUnitNoContent creates a PutConversionsFromUnitToUnitNoContent with default headers values
func NewPutConversionsFromUnitToUnitNoContent() *PutConversionsFromUnitToUnitNoContent {
	return &PutConversionsFromUnitToUnitNoContent{}
}

/* PutConversionsFromUnitToUnitNoContent describes a response with status code 204, with default header values.

Unit conversion updated.

*/
type PutConversionsFromUnitToUnitNoContent struct {

	/* The URI of the updated resource.


	   Format: uri
	*/
	Location strfmt.URI
}

// IsSuccess returns true when this put conversions from unit to unit no content response has a 2xx status code
func (o *PutConversionsFromUnitToUnitNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put conversions from unit to unit no content response has a 3xx status code
func (o *PutConversionsFromUnitToUnitNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit no content response has a 4xx status code
func (o *PutConversionsFromUnitToUnitNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversions from unit to unit no content response has a 5xx status code
func (o *PutConversionsFromUnitToUnitNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit no content response a status code equal to that given
func (o *PutConversionsFromUnitToUnitNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PutConversionsFromUnitToUnitNoContent) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitNoContent ", 204)
}

func (o *PutConversionsFromUnitToUnitNoContent) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitNoContent ", 204)
}

func (o *PutConversionsFromUnitToUnitNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		vallocation, err := formats.Parse("uri", hdrLocation)
		if err != nil {
			return errors.InvalidType("Location", "header", "strfmt.URI", hdrLocation)
		}
		o.Location = *(vallocation.(*strfmt.URI))
	}

	return nil
}

// NewPutConversionsFromUnitToUnitBadRequest creates a PutConversionsFromUnitToUnitBadRequest with default headers values
func NewPutConversionsFromUnitToUnitBadRequest() *PutConversionsFromUnitToUnitBadRequest {
	return &PutConversionsFromUnitToUnitBadRequest{}
}

/* PutConversionsFromUnitToUnitBadRequest describes a response with status code 400, with default header values.

Client error in request. Input did not pass validations. See error details.

*/
type PutConversionsFromUnitToUnitBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this put conversions from unit to unit bad request response has a 2xx status code
func (o *PutConversionsFromUnitToUnitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit bad request response has a 3xx status code
func (o *PutConversionsFromUnitToUnitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit bad request response has a 4xx status code
func (o *PutConversionsFromUnitToUnitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversions from unit to unit bad request response has a 5xx status code
func (o *PutConversionsFromUnitToUnitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit bad request response a status code equal to that given
func (o *PutConversionsFromUnitToUnitBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutConversionsFromUnitToUnitBadRequest) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversionsFromUnitToUnitBadRequest) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversionsFromUnitToUnitBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutConversionsFromUnitToUnitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversionsFromUnitToUnitUnauthorized creates a PutConversionsFromUnitToUnitUnauthorized with default headers values
func NewPutConversionsFromUnitToUnitUnauthorized() *PutConversionsFromUnitToUnitUnauthorized {
	return &PutConversionsFromUnitToUnitUnauthorized{}
}

/* PutConversionsFromUnitToUnitUnauthorized describes a response with status code 401, with default header values.

Unauthorized access for a lack of authentication

*/
type PutConversionsFromUnitToUnitUnauthorized struct {
}

// IsSuccess returns true when this put conversions from unit to unit unauthorized response has a 2xx status code
func (o *PutConversionsFromUnitToUnitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit unauthorized response has a 3xx status code
func (o *PutConversionsFromUnitToUnitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit unauthorized response has a 4xx status code
func (o *PutConversionsFromUnitToUnitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversions from unit to unit unauthorized response has a 5xx status code
func (o *PutConversionsFromUnitToUnitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit unauthorized response a status code equal to that given
func (o *PutConversionsFromUnitToUnitUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutConversionsFromUnitToUnitUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitUnauthorized ", 401)
}

func (o *PutConversionsFromUnitToUnitUnauthorized) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitUnauthorized ", 401)
}

func (o *PutConversionsFromUnitToUnitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutConversionsFromUnitToUnitForbidden creates a PutConversionsFromUnitToUnitForbidden with default headers values
func NewPutConversionsFromUnitToUnitForbidden() *PutConversionsFromUnitToUnitForbidden {
	return &PutConversionsFromUnitToUnitForbidden{}
}

/* PutConversionsFromUnitToUnitForbidden describes a response with status code 403, with default header values.

Forbidden access for a lack of sufficient privileges

*/
type PutConversionsFromUnitToUnitForbidden struct {
}

// IsSuccess returns true when this put conversions from unit to unit forbidden response has a 2xx status code
func (o *PutConversionsFromUnitToUnitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit forbidden response has a 3xx status code
func (o *PutConversionsFromUnitToUnitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit forbidden response has a 4xx status code
func (o *PutConversionsFromUnitToUnitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversions from unit to unit forbidden response has a 5xx status code
func (o *PutConversionsFromUnitToUnitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit forbidden response a status code equal to that given
func (o *PutConversionsFromUnitToUnitForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutConversionsFromUnitToUnitForbidden) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitForbidden ", 403)
}

func (o *PutConversionsFromUnitToUnitForbidden) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitForbidden ", 403)
}

func (o *PutConversionsFromUnitToUnitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutConversionsFromUnitToUnitNotFound creates a PutConversionsFromUnitToUnitNotFound with default headers values
func NewPutConversionsFromUnitToUnitNotFound() *PutConversionsFromUnitToUnitNotFound {
	return &PutConversionsFromUnitToUnitNotFound{}
}

/* PutConversionsFromUnitToUnitNotFound describes a response with status code 404, with default header values.

Resource not found. The object requested does not exist or is not visible to the user.

*/
type PutConversionsFromUnitToUnitNotFound struct {
}

// IsSuccess returns true when this put conversions from unit to unit not found response has a 2xx status code
func (o *PutConversionsFromUnitToUnitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit not found response has a 3xx status code
func (o *PutConversionsFromUnitToUnitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit not found response has a 4xx status code
func (o *PutConversionsFromUnitToUnitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversions from unit to unit not found response has a 5xx status code
func (o *PutConversionsFromUnitToUnitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit not found response a status code equal to that given
func (o *PutConversionsFromUnitToUnitNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutConversionsFromUnitToUnitNotFound) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitNotFound ", 404)
}

func (o *PutConversionsFromUnitToUnitNotFound) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitNotFound ", 404)
}

func (o *PutConversionsFromUnitToUnitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutConversionsFromUnitToUnitMethodNotAllowed creates a PutConversionsFromUnitToUnitMethodNotAllowed with default headers values
func NewPutConversionsFromUnitToUnitMethodNotAllowed() *PutConversionsFromUnitToUnitMethodNotAllowed {
	return &PutConversionsFromUnitToUnitMethodNotAllowed{}
}

/* PutConversionsFromUnitToUnitMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed

*/
type PutConversionsFromUnitToUnitMethodNotAllowed struct {
}

// IsSuccess returns true when this put conversions from unit to unit method not allowed response has a 2xx status code
func (o *PutConversionsFromUnitToUnitMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit method not allowed response has a 3xx status code
func (o *PutConversionsFromUnitToUnitMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit method not allowed response has a 4xx status code
func (o *PutConversionsFromUnitToUnitMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversions from unit to unit method not allowed response has a 5xx status code
func (o *PutConversionsFromUnitToUnitMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversions from unit to unit method not allowed response a status code equal to that given
func (o *PutConversionsFromUnitToUnitMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *PutConversionsFromUnitToUnitMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitMethodNotAllowed ", 405)
}

func (o *PutConversionsFromUnitToUnitMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitMethodNotAllowed ", 405)
}

func (o *PutConversionsFromUnitToUnitMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutConversionsFromUnitToUnitInternalServerError creates a PutConversionsFromUnitToUnitInternalServerError with default headers values
func NewPutConversionsFromUnitToUnitInternalServerError() *PutConversionsFromUnitToUnitInternalServerError {
	return &PutConversionsFromUnitToUnitInternalServerError{}
}

/* PutConversionsFromUnitToUnitInternalServerError describes a response with status code 500, with default header values.

An internal error has occured. See error details.

*/
type PutConversionsFromUnitToUnitInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this put conversions from unit to unit internal server error response has a 2xx status code
func (o *PutConversionsFromUnitToUnitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversions from unit to unit internal server error response has a 3xx status code
func (o *PutConversionsFromUnitToUnitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversions from unit to unit internal server error response has a 4xx status code
func (o *PutConversionsFromUnitToUnitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversions from unit to unit internal server error response has a 5xx status code
func (o *PutConversionsFromUnitToUnitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversions from unit to unit internal server error response a status code equal to that given
func (o *PutConversionsFromUnitToUnitInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutConversionsFromUnitToUnitInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversionsFromUnitToUnitInternalServerError) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] putConversionsFromUnitToUnitInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversionsFromUnitToUnitInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutConversionsFromUnitToUnitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversionsFromUnitToUnitDefault creates a PutConversionsFromUnitToUnitDefault with default headers values
func NewPutConversionsFromUnitToUnitDefault(code int) *PutConversionsFromUnitToUnitDefault {
	return &PutConversionsFromUnitToUnitDefault{
		_statusCode: code,
	}
}

/* PutConversionsFromUnitToUnitDefault describes a response with status code -1, with default header values.

Other error. See error details.

*/
type PutConversionsFromUnitToUnitDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the put conversions from unit to unit default response
func (o *PutConversionsFromUnitToUnitDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this put conversions from unit to unit default response has a 2xx status code
func (o *PutConversionsFromUnitToUnitDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put conversions from unit to unit default response has a 3xx status code
func (o *PutConversionsFromUnitToUnitDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put conversions from unit to unit default response has a 4xx status code
func (o *PutConversionsFromUnitToUnitDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put conversions from unit to unit default response has a 5xx status code
func (o *PutConversionsFromUnitToUnitDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put conversions from unit to unit default response a status code equal to that given
func (o *PutConversionsFromUnitToUnitDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PutConversionsFromUnitToUnitDefault) Error() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] PutConversionsFromUnitToUnit default  %+v", o._statusCode, o.Payload)
}

func (o *PutConversionsFromUnitToUnitDefault) String() string {
	return fmt.Sprintf("[PUT /conversions/{fromUnit}/{toUnit}][%d] PutConversionsFromUnitToUnit default  %+v", o._statusCode, o.Payload)
}

func (o *PutConversionsFromUnitToUnitDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutConversionsFromUnitToUnitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
