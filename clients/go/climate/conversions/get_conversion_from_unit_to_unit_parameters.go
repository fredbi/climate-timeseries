// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversionFromUnitToUnitParams creates a new GetConversionFromUnitToUnitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConversionFromUnitToUnitParams() *GetConversionFromUnitToUnitParams {
	return &GetConversionFromUnitToUnitParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversionFromUnitToUnitParamsWithTimeout creates a new GetConversionFromUnitToUnitParams object
// with the ability to set a timeout on a request.
func NewGetConversionFromUnitToUnitParamsWithTimeout(timeout time.Duration) *GetConversionFromUnitToUnitParams {
	return &GetConversionFromUnitToUnitParams{
		timeout: timeout,
	}
}

// NewGetConversionFromUnitToUnitParamsWithContext creates a new GetConversionFromUnitToUnitParams object
// with the ability to set a context for a request.
func NewGetConversionFromUnitToUnitParamsWithContext(ctx context.Context) *GetConversionFromUnitToUnitParams {
	return &GetConversionFromUnitToUnitParams{
		Context: ctx,
	}
}

// NewGetConversionFromUnitToUnitParamsWithHTTPClient creates a new GetConversionFromUnitToUnitParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConversionFromUnitToUnitParamsWithHTTPClient(client *http.Client) *GetConversionFromUnitToUnitParams {
	return &GetConversionFromUnitToUnitParams{
		HTTPClient: client,
	}
}

/* GetConversionFromUnitToUnitParams contains all the parameters to send to the API endpoint
   for the get conversion from unit to unit operation.

   Typically these are written to a http.Request.
*/
type GetConversionFromUnitToUnitParams struct {

	/* Audit.

	   When audit is specified, the response will also contain the audit trail field.

	*/
	Audit *bool

	/* Brief.

	   When brief is specified, the response will only contain essential data and strip long descriptions.

	*/
	Brief *bool

	/* Deep.

	   When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.

	*/
	Deep *bool

	/* FromUnit.

	   Original unit to be converted.

	*/
	FromUnit string

	/* ToUnit.

	   Original unit to be converted.

	*/
	ToUnit string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get conversion from unit to unit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversionFromUnitToUnitParams) WithDefaults() *GetConversionFromUnitToUnitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get conversion from unit to unit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversionFromUnitToUnitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithTimeout(timeout time.Duration) *GetConversionFromUnitToUnitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithContext(ctx context.Context) *GetConversionFromUnitToUnitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithHTTPClient(client *http.Client) *GetConversionFromUnitToUnitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudit adds the audit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithAudit(audit *bool) *GetConversionFromUnitToUnitParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetAudit(audit *bool) {
	o.Audit = audit
}

// WithBrief adds the brief to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithBrief(brief *bool) *GetConversionFromUnitToUnitParams {
	o.SetBrief(brief)
	return o
}

// SetBrief adds the brief to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetBrief(brief *bool) {
	o.Brief = brief
}

// WithDeep adds the deep to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithDeep(deep *bool) *GetConversionFromUnitToUnitParams {
	o.SetDeep(deep)
	return o
}

// SetDeep adds the deep to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetDeep(deep *bool) {
	o.Deep = deep
}

// WithFromUnit adds the fromUnit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithFromUnit(fromUnit string) *GetConversionFromUnitToUnitParams {
	o.SetFromUnit(fromUnit)
	return o
}

// SetFromUnit adds the fromUnit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetFromUnit(fromUnit string) {
	o.FromUnit = fromUnit
}

// WithToUnit adds the toUnit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) WithToUnit(toUnit string) *GetConversionFromUnitToUnitParams {
	o.SetToUnit(toUnit)
	return o
}

// SetToUnit adds the toUnit to the get conversion from unit to unit params
func (o *GetConversionFromUnitToUnitParams) SetToUnit(toUnit string) {
	o.ToUnit = toUnit
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversionFromUnitToUnitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Audit != nil {

		// query param audit
		var qrAudit bool

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := swag.FormatBool(qrAudit)
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	if o.Brief != nil {

		// query param brief
		var qrBrief bool

		if o.Brief != nil {
			qrBrief = *o.Brief
		}
		qBrief := swag.FormatBool(qrBrief)
		if qBrief != "" {

			if err := r.SetQueryParam("brief", qBrief); err != nil {
				return err
			}
		}
	}

	if o.Deep != nil {

		// query param deep
		var qrDeep bool

		if o.Deep != nil {
			qrDeep = *o.Deep
		}
		qDeep := swag.FormatBool(qrDeep)
		if qDeep != "" {

			if err := r.SetQueryParam("deep", qDeep); err != nil {
				return err
			}
		}
	}

	// path param fromUnit
	if err := r.SetPathParam("fromUnit", o.FromUnit); err != nil {
		return err
	}

	// path param toUnit
	if err := r.SetPathParam("toUnit", o.ToUnit); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
