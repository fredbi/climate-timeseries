// Code generated by go-swagger; DO NOT EDIT.

package conversions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// GetConversionReader is a Reader for the GetConversion structure.
type GetConversionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConversionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConversionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetConversionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConversionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetConversionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetConversionOK creates a GetConversionOK with default headers values
func NewGetConversionOK() *GetConversionOK {
	return &GetConversionOK{}
}

/* GetConversionOK describes a response with status code 200, with default header values.

A unit conversion specification

*/
type GetConversionOK struct {
	Payload *models.Conversion
}

// IsSuccess returns true when this get conversion o k response has a 2xx status code
func (o *GetConversionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get conversion o k response has a 3xx status code
func (o *GetConversionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion o k response has a 4xx status code
func (o *GetConversionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversion o k response has a 5xx status code
func (o *GetConversionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion o k response a status code equal to that given
func (o *GetConversionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConversionOK) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionOK  %+v", 200, o.Payload)
}

func (o *GetConversionOK) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionOK  %+v", 200, o.Payload)
}

func (o *GetConversionOK) GetPayload() *models.Conversion {
	return o.Payload
}

func (o *GetConversionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversionBadRequest creates a GetConversionBadRequest with default headers values
func NewGetConversionBadRequest() *GetConversionBadRequest {
	return &GetConversionBadRequest{}
}

/* GetConversionBadRequest describes a response with status code 400, with default header values.

Client error in request. Input did not pass validations. See error details.

*/
type GetConversionBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get conversion bad request response has a 2xx status code
func (o *GetConversionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion bad request response has a 3xx status code
func (o *GetConversionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion bad request response has a 4xx status code
func (o *GetConversionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion bad request response has a 5xx status code
func (o *GetConversionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion bad request response a status code equal to that given
func (o *GetConversionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConversionBadRequest) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversionBadRequest) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversionBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetConversionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversionUnauthorized creates a GetConversionUnauthorized with default headers values
func NewGetConversionUnauthorized() *GetConversionUnauthorized {
	return &GetConversionUnauthorized{}
}

/* GetConversionUnauthorized describes a response with status code 401, with default header values.

Unauthorized access for a lack of authentication

*/
type GetConversionUnauthorized struct {
}

// IsSuccess returns true when this get conversion unauthorized response has a 2xx status code
func (o *GetConversionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion unauthorized response has a 3xx status code
func (o *GetConversionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion unauthorized response has a 4xx status code
func (o *GetConversionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion unauthorized response has a 5xx status code
func (o *GetConversionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion unauthorized response a status code equal to that given
func (o *GetConversionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConversionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionUnauthorized ", 401)
}

func (o *GetConversionUnauthorized) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionUnauthorized ", 401)
}

func (o *GetConversionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConversionForbidden creates a GetConversionForbidden with default headers values
func NewGetConversionForbidden() *GetConversionForbidden {
	return &GetConversionForbidden{}
}

/* GetConversionForbidden describes a response with status code 403, with default header values.

Forbidden access for a lack of sufficient privileges

*/
type GetConversionForbidden struct {
}

// IsSuccess returns true when this get conversion forbidden response has a 2xx status code
func (o *GetConversionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion forbidden response has a 3xx status code
func (o *GetConversionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion forbidden response has a 4xx status code
func (o *GetConversionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion forbidden response has a 5xx status code
func (o *GetConversionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion forbidden response a status code equal to that given
func (o *GetConversionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConversionForbidden) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionForbidden ", 403)
}

func (o *GetConversionForbidden) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionForbidden ", 403)
}

func (o *GetConversionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConversionNotFound creates a GetConversionNotFound with default headers values
func NewGetConversionNotFound() *GetConversionNotFound {
	return &GetConversionNotFound{}
}

/* GetConversionNotFound describes a response with status code 404, with default header values.

Resource not found. The object requested does not exist or is not visible to the user.

*/
type GetConversionNotFound struct {
}

// IsSuccess returns true when this get conversion not found response has a 2xx status code
func (o *GetConversionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion not found response has a 3xx status code
func (o *GetConversionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion not found response has a 4xx status code
func (o *GetConversionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion not found response has a 5xx status code
func (o *GetConversionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion not found response a status code equal to that given
func (o *GetConversionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConversionNotFound) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionNotFound ", 404)
}

func (o *GetConversionNotFound) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionNotFound ", 404)
}

func (o *GetConversionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConversionMethodNotAllowed creates a GetConversionMethodNotAllowed with default headers values
func NewGetConversionMethodNotAllowed() *GetConversionMethodNotAllowed {
	return &GetConversionMethodNotAllowed{}
}

/* GetConversionMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed

*/
type GetConversionMethodNotAllowed struct {
}

// IsSuccess returns true when this get conversion method not allowed response has a 2xx status code
func (o *GetConversionMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion method not allowed response has a 3xx status code
func (o *GetConversionMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion method not allowed response has a 4xx status code
func (o *GetConversionMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion method not allowed response has a 5xx status code
func (o *GetConversionMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion method not allowed response a status code equal to that given
func (o *GetConversionMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *GetConversionMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionMethodNotAllowed ", 405)
}

func (o *GetConversionMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionMethodNotAllowed ", 405)
}

func (o *GetConversionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConversionInternalServerError creates a GetConversionInternalServerError with default headers values
func NewGetConversionInternalServerError() *GetConversionInternalServerError {
	return &GetConversionInternalServerError{}
}

/* GetConversionInternalServerError describes a response with status code 500, with default header values.

An internal error has occured. See error details.

*/
type GetConversionInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get conversion internal server error response has a 2xx status code
func (o *GetConversionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion internal server error response has a 3xx status code
func (o *GetConversionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion internal server error response has a 4xx status code
func (o *GetConversionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversion internal server error response has a 5xx status code
func (o *GetConversionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversion internal server error response a status code equal to that given
func (o *GetConversionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetConversionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversionInternalServerError) String() string {
	return fmt.Sprintf("[GET /conversion][%d] getConversionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversionInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetConversionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversionDefault creates a GetConversionDefault with default headers values
func NewGetConversionDefault(code int) *GetConversionDefault {
	return &GetConversionDefault{
		_statusCode: code,
	}
}

/* GetConversionDefault describes a response with status code -1, with default header values.

Other error. See error details.

*/
type GetConversionDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the get conversion default response
func (o *GetConversionDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get conversion default response has a 2xx status code
func (o *GetConversionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get conversion default response has a 3xx status code
func (o *GetConversionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get conversion default response has a 4xx status code
func (o *GetConversionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get conversion default response has a 5xx status code
func (o *GetConversionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get conversion default response a status code equal to that given
func (o *GetConversionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetConversionDefault) Error() string {
	return fmt.Sprintf("[GET /conversion][%d] GetConversion default  %+v", o._statusCode, o.Payload)
}

func (o *GetConversionDefault) String() string {
	return fmt.Sprintf("[GET /conversion][%d] GetConversion default  %+v", o._statusCode, o.Payload)
}

func (o *GetConversionDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetConversionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
