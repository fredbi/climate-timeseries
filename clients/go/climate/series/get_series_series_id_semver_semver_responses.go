// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// GetSeriesSeriesIDSemverSemverReader is a Reader for the GetSeriesSeriesIDSemverSemver structure.
type GetSeriesSeriesIDSemverSemverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSeriesSeriesIDSemverSemverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSeriesSeriesIDSemverSemverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSeriesSeriesIDSemverSemverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSeriesSeriesIDSemverSemverUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSeriesSeriesIDSemverSemverForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSeriesSeriesIDSemverSemverNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetSeriesSeriesIDSemverSemverMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSeriesSeriesIDSemverSemverInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetSeriesSeriesIDSemverSemverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSeriesSeriesIDSemverSemverOK creates a GetSeriesSeriesIDSemverSemverOK with default headers values
func NewGetSeriesSeriesIDSemverSemverOK() *GetSeriesSeriesIDSemverSemverOK {
	return &GetSeriesSeriesIDSemverSemverOK{}
}

/* GetSeriesSeriesIDSemverSemverOK describes a response with status code 200, with default header values.

Versioned time series for a given semver tag.

*/
type GetSeriesSeriesIDSemverSemverOK struct {
	Payload *models.VersionedSeries
}

// IsSuccess returns true when this get series series Id semver semver o k response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get series series Id semver semver o k response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver o k response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get series series Id semver semver o k response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver o k response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSeriesSeriesIDSemverSemverOK) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverOK  %+v", 200, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverOK) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverOK  %+v", 200, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverOK) GetPayload() *models.VersionedSeries {
	return o.Payload
}

func (o *GetSeriesSeriesIDSemverSemverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionedSeries)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesSeriesIDSemverSemverBadRequest creates a GetSeriesSeriesIDSemverSemverBadRequest with default headers values
func NewGetSeriesSeriesIDSemverSemverBadRequest() *GetSeriesSeriesIDSemverSemverBadRequest {
	return &GetSeriesSeriesIDSemverSemverBadRequest{}
}

/* GetSeriesSeriesIDSemverSemverBadRequest describes a response with status code 400, with default header values.

Client error in request. Input did not pass validations. See error details.

*/
type GetSeriesSeriesIDSemverSemverBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get series series Id semver semver bad request response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver bad request response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver bad request response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get series series Id semver semver bad request response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver bad request response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSeriesSeriesIDSemverSemverBadRequest) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverBadRequest  %+v", 400, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverBadRequest) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverBadRequest  %+v", 400, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSeriesSeriesIDSemverSemverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesSeriesIDSemverSemverUnauthorized creates a GetSeriesSeriesIDSemverSemverUnauthorized with default headers values
func NewGetSeriesSeriesIDSemverSemverUnauthorized() *GetSeriesSeriesIDSemverSemverUnauthorized {
	return &GetSeriesSeriesIDSemverSemverUnauthorized{}
}

/* GetSeriesSeriesIDSemverSemverUnauthorized describes a response with status code 401, with default header values.

Unauthorized access for a lack of authentication

*/
type GetSeriesSeriesIDSemverSemverUnauthorized struct {
}

// IsSuccess returns true when this get series series Id semver semver unauthorized response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver unauthorized response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver unauthorized response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get series series Id semver semver unauthorized response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver unauthorized response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSeriesSeriesIDSemverSemverUnauthorized) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverUnauthorized ", 401)
}

func (o *GetSeriesSeriesIDSemverSemverUnauthorized) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverUnauthorized ", 401)
}

func (o *GetSeriesSeriesIDSemverSemverUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeriesSeriesIDSemverSemverForbidden creates a GetSeriesSeriesIDSemverSemverForbidden with default headers values
func NewGetSeriesSeriesIDSemverSemverForbidden() *GetSeriesSeriesIDSemverSemverForbidden {
	return &GetSeriesSeriesIDSemverSemverForbidden{}
}

/* GetSeriesSeriesIDSemverSemverForbidden describes a response with status code 403, with default header values.

Forbidden access for a lack of sufficient privileges

*/
type GetSeriesSeriesIDSemverSemverForbidden struct {
}

// IsSuccess returns true when this get series series Id semver semver forbidden response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver forbidden response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver forbidden response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get series series Id semver semver forbidden response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver forbidden response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSeriesSeriesIDSemverSemverForbidden) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverForbidden ", 403)
}

func (o *GetSeriesSeriesIDSemverSemverForbidden) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverForbidden ", 403)
}

func (o *GetSeriesSeriesIDSemverSemverForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeriesSeriesIDSemverSemverNotFound creates a GetSeriesSeriesIDSemverSemverNotFound with default headers values
func NewGetSeriesSeriesIDSemverSemverNotFound() *GetSeriesSeriesIDSemverSemverNotFound {
	return &GetSeriesSeriesIDSemverSemverNotFound{}
}

/* GetSeriesSeriesIDSemverSemverNotFound describes a response with status code 404, with default header values.

Resource not found. The object requested does not exist or is not visible to the user.

*/
type GetSeriesSeriesIDSemverSemverNotFound struct {
}

// IsSuccess returns true when this get series series Id semver semver not found response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver not found response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver not found response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get series series Id semver semver not found response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver not found response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSeriesSeriesIDSemverSemverNotFound) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverNotFound ", 404)
}

func (o *GetSeriesSeriesIDSemverSemverNotFound) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverNotFound ", 404)
}

func (o *GetSeriesSeriesIDSemverSemverNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeriesSeriesIDSemverSemverMethodNotAllowed creates a GetSeriesSeriesIDSemverSemverMethodNotAllowed with default headers values
func NewGetSeriesSeriesIDSemverSemverMethodNotAllowed() *GetSeriesSeriesIDSemverSemverMethodNotAllowed {
	return &GetSeriesSeriesIDSemverSemverMethodNotAllowed{}
}

/* GetSeriesSeriesIDSemverSemverMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed

*/
type GetSeriesSeriesIDSemverSemverMethodNotAllowed struct {
}

// IsSuccess returns true when this get series series Id semver semver method not allowed response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver method not allowed response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver method not allowed response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get series series Id semver semver method not allowed response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get series series Id semver semver method not allowed response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverMethodNotAllowed ", 405)
}

func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverMethodNotAllowed ", 405)
}

func (o *GetSeriesSeriesIDSemverSemverMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeriesSeriesIDSemverSemverInternalServerError creates a GetSeriesSeriesIDSemverSemverInternalServerError with default headers values
func NewGetSeriesSeriesIDSemverSemverInternalServerError() *GetSeriesSeriesIDSemverSemverInternalServerError {
	return &GetSeriesSeriesIDSemverSemverInternalServerError{}
}

/* GetSeriesSeriesIDSemverSemverInternalServerError describes a response with status code 500, with default header values.

An internal error has occured. See error details.

*/
type GetSeriesSeriesIDSemverSemverInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get series series Id semver semver internal server error response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get series series Id semver semver internal server error response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get series series Id semver semver internal server error response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get series series Id semver semver internal server error response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get series series Id semver semver internal server error response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSeriesSeriesIDSemverSemverInternalServerError) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverInternalServerError) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] getSeriesSeriesIdSemverSemverInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSeriesSeriesIDSemverSemverInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeriesSeriesIDSemverSemverDefault creates a GetSeriesSeriesIDSemverSemverDefault with default headers values
func NewGetSeriesSeriesIDSemverSemverDefault(code int) *GetSeriesSeriesIDSemverSemverDefault {
	return &GetSeriesSeriesIDSemverSemverDefault{
		_statusCode: code,
	}
}

/* GetSeriesSeriesIDSemverSemverDefault describes a response with status code -1, with default header values.

Other error. See error details.

*/
type GetSeriesSeriesIDSemverSemverDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the get series series ID semver semver default response
func (o *GetSeriesSeriesIDSemverSemverDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get series series ID semver semver default response has a 2xx status code
func (o *GetSeriesSeriesIDSemverSemverDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get series series ID semver semver default response has a 3xx status code
func (o *GetSeriesSeriesIDSemverSemverDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get series series ID semver semver default response has a 4xx status code
func (o *GetSeriesSeriesIDSemverSemverDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get series series ID semver semver default response has a 5xx status code
func (o *GetSeriesSeriesIDSemverSemverDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get series series ID semver semver default response a status code equal to that given
func (o *GetSeriesSeriesIDSemverSemverDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetSeriesSeriesIDSemverSemverDefault) Error() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] GetSeriesSeriesIDSemverSemver default  %+v", o._statusCode, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverDefault) String() string {
	return fmt.Sprintf("[GET /series/{seriesId}/semver/{semver}][%d] GetSeriesSeriesIDSemverSemver default  %+v", o._statusCode, o.Payload)
}

func (o *GetSeriesSeriesIDSemverSemverDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSeriesSeriesIDSemverSemverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
