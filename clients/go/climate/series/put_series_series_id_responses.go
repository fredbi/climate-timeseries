// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// PutSeriesSeriesIDReader is a Reader for the PutSeriesSeriesID structure.
type PutSeriesSeriesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSeriesSeriesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutSeriesSeriesIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSeriesSeriesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSeriesSeriesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSeriesSeriesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSeriesSeriesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPutSeriesSeriesIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSeriesSeriesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutSeriesSeriesIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutSeriesSeriesIDNoContent creates a PutSeriesSeriesIDNoContent with default headers values
func NewPutSeriesSeriesIDNoContent() *PutSeriesSeriesIDNoContent {
	return &PutSeriesSeriesIDNoContent{}
}

/* PutSeriesSeriesIDNoContent describes a response with status code 204, with default header values.

 Series successfully updated.

Check the response headers to retrieve this resource.

*/
type PutSeriesSeriesIDNoContent struct {

	/* The URI of the updated resource.


	   Format: uri
	*/
	Location strfmt.URI

	/* The ID of the updated resource.


	   Format: int64
	*/
	XID int64
}

// IsSuccess returns true when this put series series Id no content response has a 2xx status code
func (o *PutSeriesSeriesIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put series series Id no content response has a 3xx status code
func (o *PutSeriesSeriesIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id no content response has a 4xx status code
func (o *PutSeriesSeriesIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put series series Id no content response has a 5xx status code
func (o *PutSeriesSeriesIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id no content response a status code equal to that given
func (o *PutSeriesSeriesIDNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PutSeriesSeriesIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdNoContent ", 204)
}

func (o *PutSeriesSeriesIDNoContent) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdNoContent ", 204)
}

func (o *PutSeriesSeriesIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		vallocation, err := formats.Parse("uri", hdrLocation)
		if err != nil {
			return errors.InvalidType("Location", "header", "strfmt.URI", hdrLocation)
		}
		o.Location = *(vallocation.(*strfmt.URI))
	}

	// hydrates response header X-ID
	hdrXID := response.GetHeader("X-ID")

	if hdrXID != "" {
		valxId, err := swag.ConvertInt64(hdrXID)
		if err != nil {
			return errors.InvalidType("X-ID", "header", "int64", hdrXID)
		}
		o.XID = valxId
	}

	return nil
}

// NewPutSeriesSeriesIDBadRequest creates a PutSeriesSeriesIDBadRequest with default headers values
func NewPutSeriesSeriesIDBadRequest() *PutSeriesSeriesIDBadRequest {
	return &PutSeriesSeriesIDBadRequest{}
}

/* PutSeriesSeriesIDBadRequest describes a response with status code 400, with default header values.

Client error in request. Input did not pass validations. See error details.

*/
type PutSeriesSeriesIDBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this put series series Id bad request response has a 2xx status code
func (o *PutSeriesSeriesIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id bad request response has a 3xx status code
func (o *PutSeriesSeriesIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id bad request response has a 4xx status code
func (o *PutSeriesSeriesIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put series series Id bad request response has a 5xx status code
func (o *PutSeriesSeriesIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id bad request response a status code equal to that given
func (o *PutSeriesSeriesIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutSeriesSeriesIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutSeriesSeriesIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutSeriesSeriesIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutSeriesSeriesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSeriesSeriesIDUnauthorized creates a PutSeriesSeriesIDUnauthorized with default headers values
func NewPutSeriesSeriesIDUnauthorized() *PutSeriesSeriesIDUnauthorized {
	return &PutSeriesSeriesIDUnauthorized{}
}

/* PutSeriesSeriesIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized access for a lack of authentication

*/
type PutSeriesSeriesIDUnauthorized struct {
}

// IsSuccess returns true when this put series series Id unauthorized response has a 2xx status code
func (o *PutSeriesSeriesIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id unauthorized response has a 3xx status code
func (o *PutSeriesSeriesIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id unauthorized response has a 4xx status code
func (o *PutSeriesSeriesIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put series series Id unauthorized response has a 5xx status code
func (o *PutSeriesSeriesIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id unauthorized response a status code equal to that given
func (o *PutSeriesSeriesIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutSeriesSeriesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdUnauthorized ", 401)
}

func (o *PutSeriesSeriesIDUnauthorized) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdUnauthorized ", 401)
}

func (o *PutSeriesSeriesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSeriesSeriesIDForbidden creates a PutSeriesSeriesIDForbidden with default headers values
func NewPutSeriesSeriesIDForbidden() *PutSeriesSeriesIDForbidden {
	return &PutSeriesSeriesIDForbidden{}
}

/* PutSeriesSeriesIDForbidden describes a response with status code 403, with default header values.

Forbidden access for a lack of sufficient privileges

*/
type PutSeriesSeriesIDForbidden struct {
}

// IsSuccess returns true when this put series series Id forbidden response has a 2xx status code
func (o *PutSeriesSeriesIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id forbidden response has a 3xx status code
func (o *PutSeriesSeriesIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id forbidden response has a 4xx status code
func (o *PutSeriesSeriesIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put series series Id forbidden response has a 5xx status code
func (o *PutSeriesSeriesIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id forbidden response a status code equal to that given
func (o *PutSeriesSeriesIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutSeriesSeriesIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdForbidden ", 403)
}

func (o *PutSeriesSeriesIDForbidden) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdForbidden ", 403)
}

func (o *PutSeriesSeriesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSeriesSeriesIDNotFound creates a PutSeriesSeriesIDNotFound with default headers values
func NewPutSeriesSeriesIDNotFound() *PutSeriesSeriesIDNotFound {
	return &PutSeriesSeriesIDNotFound{}
}

/* PutSeriesSeriesIDNotFound describes a response with status code 404, with default header values.

Resource not found. The object requested does not exist or is not visible to the user.

*/
type PutSeriesSeriesIDNotFound struct {
}

// IsSuccess returns true when this put series series Id not found response has a 2xx status code
func (o *PutSeriesSeriesIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id not found response has a 3xx status code
func (o *PutSeriesSeriesIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id not found response has a 4xx status code
func (o *PutSeriesSeriesIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put series series Id not found response has a 5xx status code
func (o *PutSeriesSeriesIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id not found response a status code equal to that given
func (o *PutSeriesSeriesIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutSeriesSeriesIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdNotFound ", 404)
}

func (o *PutSeriesSeriesIDNotFound) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdNotFound ", 404)
}

func (o *PutSeriesSeriesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSeriesSeriesIDMethodNotAllowed creates a PutSeriesSeriesIDMethodNotAllowed with default headers values
func NewPutSeriesSeriesIDMethodNotAllowed() *PutSeriesSeriesIDMethodNotAllowed {
	return &PutSeriesSeriesIDMethodNotAllowed{}
}

/* PutSeriesSeriesIDMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed

*/
type PutSeriesSeriesIDMethodNotAllowed struct {
}

// IsSuccess returns true when this put series series Id method not allowed response has a 2xx status code
func (o *PutSeriesSeriesIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id method not allowed response has a 3xx status code
func (o *PutSeriesSeriesIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id method not allowed response has a 4xx status code
func (o *PutSeriesSeriesIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this put series series Id method not allowed response has a 5xx status code
func (o *PutSeriesSeriesIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this put series series Id method not allowed response a status code equal to that given
func (o *PutSeriesSeriesIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *PutSeriesSeriesIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdMethodNotAllowed ", 405)
}

func (o *PutSeriesSeriesIDMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdMethodNotAllowed ", 405)
}

func (o *PutSeriesSeriesIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSeriesSeriesIDInternalServerError creates a PutSeriesSeriesIDInternalServerError with default headers values
func NewPutSeriesSeriesIDInternalServerError() *PutSeriesSeriesIDInternalServerError {
	return &PutSeriesSeriesIDInternalServerError{}
}

/* PutSeriesSeriesIDInternalServerError describes a response with status code 500, with default header values.

An internal error has occured. See error details.

*/
type PutSeriesSeriesIDInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this put series series Id internal server error response has a 2xx status code
func (o *PutSeriesSeriesIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put series series Id internal server error response has a 3xx status code
func (o *PutSeriesSeriesIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put series series Id internal server error response has a 4xx status code
func (o *PutSeriesSeriesIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put series series Id internal server error response has a 5xx status code
func (o *PutSeriesSeriesIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put series series Id internal server error response a status code equal to that given
func (o *PutSeriesSeriesIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutSeriesSeriesIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSeriesSeriesIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] putSeriesSeriesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSeriesSeriesIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutSeriesSeriesIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSeriesSeriesIDDefault creates a PutSeriesSeriesIDDefault with default headers values
func NewPutSeriesSeriesIDDefault(code int) *PutSeriesSeriesIDDefault {
	return &PutSeriesSeriesIDDefault{
		_statusCode: code,
	}
}

/* PutSeriesSeriesIDDefault describes a response with status code -1, with default header values.

Other error. See error details.

*/
type PutSeriesSeriesIDDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the put series series ID default response
func (o *PutSeriesSeriesIDDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this put series series ID default response has a 2xx status code
func (o *PutSeriesSeriesIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put series series ID default response has a 3xx status code
func (o *PutSeriesSeriesIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put series series ID default response has a 4xx status code
func (o *PutSeriesSeriesIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put series series ID default response has a 5xx status code
func (o *PutSeriesSeriesIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put series series ID default response a status code equal to that given
func (o *PutSeriesSeriesIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PutSeriesSeriesIDDefault) Error() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] PutSeriesSeriesID default  %+v", o._statusCode, o.Payload)
}

func (o *PutSeriesSeriesIDDefault) String() string {
	return fmt.Sprintf("[PUT /series/{seriesId}][%d] PutSeriesSeriesID default  %+v", o._statusCode, o.Payload)
}

func (o *PutSeriesSeriesIDDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PutSeriesSeriesIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
