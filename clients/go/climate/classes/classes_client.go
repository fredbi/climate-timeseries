// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new classes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for classes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteClassesClassIDMembersClassMemberID(params *DeleteClassesClassIDMembersClassMemberIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassesClassIDMembersClassMemberIDNoContent, error)

	GetClasses(params *GetClassesParams, opts ...ClientOption) (*GetClassesOK, error)

	GetClassesClassID(params *GetClassesClassIDParams, opts ...ClientOption) (*GetClassesClassIDOK, error)

	GetClassesClassIDMembers(params *GetClassesClassIDMembersParams, opts ...ClientOption) (*GetClassesClassIDMembersOK, error)

	PostClassesClassIDMembers(params *PostClassesClassIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostClassesClassIDMembersCreated, error)

	PutClassesClassID(params *PutClassesClassIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClassesClassIDNoContent, error)

	PutClassesClassIDMembersClassMemberID(params *PutClassesClassIDMembersClassMemberIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClassesClassIDMembersClassMemberIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteClassesClassIDMembersClassMemberID removes a member from a nomenclature class
*/
func (a *Client) DeleteClassesClassIDMembersClassMemberID(params *DeleteClassesClassIDMembersClassMemberIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassesClassIDMembersClassMemberIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassesClassIDMembersClassMemberIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClassesClassIDMembersClassMemberID",
		Method:             "DELETE",
		PathPattern:        "/classes/{classId}/members/{classMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClassesClassIDMembersClassMemberIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassesClassIDMembersClassMemberIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClassesClassIDMembersClassMemberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClasses gets all valid nomenclature classes
*/
func (a *Client) GetClasses(params *GetClassesParams, opts ...ClientOption) (*GetClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClasses",
		Method:             "GET",
		PathPattern:        "/classes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClassesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClassesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClassesClassID gets metadata about a nomenclature class
*/
func (a *Client) GetClassesClassID(params *GetClassesClassIDParams, opts ...ClientOption) (*GetClassesClassIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassesClassIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClassesClassID",
		Method:             "GET",
		PathPattern:        "/classes/{classId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClassesClassIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassesClassIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClassesClassIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClassesClassIDMembers gets all the members of a nomenclature class

  Returns a a collection of nomenclature class members.

Example:
  GET /classes/munit/members returns all measurement units.

If the request negotiates a response MIME type with text/csv (with the Accept header),
this endpoint produces a CSV file.

*/
func (a *Client) GetClassesClassIDMembers(params *GetClassesClassIDMembersParams, opts ...ClientOption) (*GetClassesClassIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClassesClassIDMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClassesClassIDMembers",
		Method:             "GET",
		PathPattern:        "/classes/{classId}/members",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClassesClassIDMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClassesClassIDMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClassesClassIDMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostClassesClassIDMembers adds a new member in a nomenclature class
*/
func (a *Client) PostClassesClassIDMembers(params *PostClassesClassIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostClassesClassIDMembersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClassesClassIDMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostClassesClassIDMembers",
		Method:             "POST",
		PathPattern:        "/classes/{classId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClassesClassIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClassesClassIDMembersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClassesClassIDMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutClassesClassID updates descriptive metadata about a nomenclature class
*/
func (a *Client) PutClassesClassID(params *PutClassesClassIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClassesClassIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClassesClassIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClassesClassID",
		Method:             "PUT",
		PathPattern:        "/classes/{classId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClassesClassIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClassesClassIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClassesClassIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutClassesClassIDMembersClassMemberID updates a member of a nomenclature class
*/
func (a *Client) PutClassesClassIDMembersClassMemberID(params *PutClassesClassIDMembersClassMemberIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutClassesClassIDMembersClassMemberIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClassesClassIDMembersClassMemberIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClassesClassIDMembersClassMemberID",
		Method:             "PUT",
		PathPattern:        "/classes/{classId}/members/{classMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClassesClassIDMembersClassMemberIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClassesClassIDMembersClassMemberIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClassesClassIDMembersClassMemberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
