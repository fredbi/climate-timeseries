// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSearchTagsTagParams creates a new GetSearchTagsTagParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSearchTagsTagParams() *GetSearchTagsTagParams {
	return &GetSearchTagsTagParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchTagsTagParamsWithTimeout creates a new GetSearchTagsTagParams object
// with the ability to set a timeout on a request.
func NewGetSearchTagsTagParamsWithTimeout(timeout time.Duration) *GetSearchTagsTagParams {
	return &GetSearchTagsTagParams{
		timeout: timeout,
	}
}

// NewGetSearchTagsTagParamsWithContext creates a new GetSearchTagsTagParams object
// with the ability to set a context for a request.
func NewGetSearchTagsTagParamsWithContext(ctx context.Context) *GetSearchTagsTagParams {
	return &GetSearchTagsTagParams{
		Context: ctx,
	}
}

// NewGetSearchTagsTagParamsWithHTTPClient creates a new GetSearchTagsTagParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSearchTagsTagParamsWithHTTPClient(client *http.Client) *GetSearchTagsTagParams {
	return &GetSearchTagsTagParams{
		HTTPClient: client,
	}
}

/* GetSearchTagsTagParams contains all the parameters to send to the API endpoint
   for the get search tags tag operation.

   Typically these are written to a http.Request.
*/
type GetSearchTagsTagParams struct {

	/* Audit.

	   When audit is specified, the response will also contain the audit trail field.

	*/
	Audit *bool

	/* Brief.

	   When brief is specified, the response will only contain essential data and strip long descriptions.

	*/
	Brief *bool

	/* Deep.

	   When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description.

	*/
	Deep *bool

	/* Email.

	   Refers to some data owner by email.

	*/
	Email *string

	/* OwnerID.

	   The ID of the contributor.


	   Format: uuid
	*/
	OwnerID *strfmt.UUID

	/* Status.

	     Filter the result according to a given status.

	Only series in the "PUBLISHED" status are returned to the public.

	Series owner may consult their series in any status.

	*/
	Status *string

	/* Tag.

	     Filter the result by search for a given keyword, whenever tag search is applicable.

	This parameter has no effect on objects where tag search is not applicable.

	*/
	Tag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get search tags tag params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchTagsTagParams) WithDefaults() *GetSearchTagsTagParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get search tags tag params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchTagsTagParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get search tags tag params
func (o *GetSearchTagsTagParams) WithTimeout(timeout time.Duration) *GetSearchTagsTagParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search tags tag params
func (o *GetSearchTagsTagParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search tags tag params
func (o *GetSearchTagsTagParams) WithContext(ctx context.Context) *GetSearchTagsTagParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search tags tag params
func (o *GetSearchTagsTagParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search tags tag params
func (o *GetSearchTagsTagParams) WithHTTPClient(client *http.Client) *GetSearchTagsTagParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search tags tag params
func (o *GetSearchTagsTagParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudit adds the audit to the get search tags tag params
func (o *GetSearchTagsTagParams) WithAudit(audit *bool) *GetSearchTagsTagParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get search tags tag params
func (o *GetSearchTagsTagParams) SetAudit(audit *bool) {
	o.Audit = audit
}

// WithBrief adds the brief to the get search tags tag params
func (o *GetSearchTagsTagParams) WithBrief(brief *bool) *GetSearchTagsTagParams {
	o.SetBrief(brief)
	return o
}

// SetBrief adds the brief to the get search tags tag params
func (o *GetSearchTagsTagParams) SetBrief(brief *bool) {
	o.Brief = brief
}

// WithDeep adds the deep to the get search tags tag params
func (o *GetSearchTagsTagParams) WithDeep(deep *bool) *GetSearchTagsTagParams {
	o.SetDeep(deep)
	return o
}

// SetDeep adds the deep to the get search tags tag params
func (o *GetSearchTagsTagParams) SetDeep(deep *bool) {
	o.Deep = deep
}

// WithEmail adds the email to the get search tags tag params
func (o *GetSearchTagsTagParams) WithEmail(email *string) *GetSearchTagsTagParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get search tags tag params
func (o *GetSearchTagsTagParams) SetEmail(email *string) {
	o.Email = email
}

// WithOwnerID adds the ownerID to the get search tags tag params
func (o *GetSearchTagsTagParams) WithOwnerID(ownerID *strfmt.UUID) *GetSearchTagsTagParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the get search tags tag params
func (o *GetSearchTagsTagParams) SetOwnerID(ownerID *strfmt.UUID) {
	o.OwnerID = ownerID
}

// WithStatus adds the status to the get search tags tag params
func (o *GetSearchTagsTagParams) WithStatus(status *string) *GetSearchTagsTagParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get search tags tag params
func (o *GetSearchTagsTagParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the get search tags tag params
func (o *GetSearchTagsTagParams) WithTag(tag string) *GetSearchTagsTagParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get search tags tag params
func (o *GetSearchTagsTagParams) SetTag(tag string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchTagsTagParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Audit != nil {

		// query param audit
		var qrAudit bool

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := swag.FormatBool(qrAudit)
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	if o.Brief != nil {

		// query param brief
		var qrBrief bool

		if o.Brief != nil {
			qrBrief = *o.Brief
		}
		qBrief := swag.FormatBool(qrBrief)
		if qBrief != "" {

			if err := r.SetQueryParam("brief", qBrief); err != nil {
				return err
			}
		}
	}

	if o.Deep != nil {

		// query param deep
		var qrDeep bool

		if o.Deep != nil {
			qrDeep = *o.Deep
		}
		qDeep := swag.FormatBool(qrDeep)
		if qDeep != "" {

			if err := r.SetQueryParam("deep", qDeep); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.OwnerID != nil {

		// query param ownerId
		var qrOwnerID strfmt.UUID

		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID.String()
		if qOwnerID != "" {

			if err := r.SetQueryParam("ownerId", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// path param tag
	if err := r.SetPathParam("tag", o.Tag); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
