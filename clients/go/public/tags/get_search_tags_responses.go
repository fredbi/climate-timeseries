// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fredbi/climate-timeseries/pkg/restapi/models"
)

// GetSearchTagsReader is a Reader for the GetSearchTags structure.
type GetSearchTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSearchTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSearchTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSearchTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSearchTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetSearchTagsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSearchTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetSearchTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSearchTagsOK creates a GetSearchTagsOK with default headers values
func NewGetSearchTagsOK() *GetSearchTagsOK {
	return &GetSearchTagsOK{}
}

/* GetSearchTagsOK describes a response with status code 200, with default header values.

All known search tags.

*/
type GetSearchTagsOK struct {
	Payload []string
}

// IsSuccess returns true when this get search tags o k response has a 2xx status code
func (o *GetSearchTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get search tags o k response has a 3xx status code
func (o *GetSearchTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags o k response has a 4xx status code
func (o *GetSearchTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search tags o k response has a 5xx status code
func (o *GetSearchTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags o k response a status code equal to that given
func (o *GetSearchTagsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSearchTagsOK) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsOK  %+v", 200, o.Payload)
}

func (o *GetSearchTagsOK) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsOK  %+v", 200, o.Payload)
}

func (o *GetSearchTagsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetSearchTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTagsBadRequest creates a GetSearchTagsBadRequest with default headers values
func NewGetSearchTagsBadRequest() *GetSearchTagsBadRequest {
	return &GetSearchTagsBadRequest{}
}

/* GetSearchTagsBadRequest describes a response with status code 400, with default header values.

Client error in request. Input did not pass validations. See error details.

*/
type GetSearchTagsBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get search tags bad request response has a 2xx status code
func (o *GetSearchTagsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags bad request response has a 3xx status code
func (o *GetSearchTagsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags bad request response has a 4xx status code
func (o *GetSearchTagsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search tags bad request response has a 5xx status code
func (o *GetSearchTagsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags bad request response a status code equal to that given
func (o *GetSearchTagsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSearchTagsBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchTagsBadRequest) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchTagsBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSearchTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTagsUnauthorized creates a GetSearchTagsUnauthorized with default headers values
func NewGetSearchTagsUnauthorized() *GetSearchTagsUnauthorized {
	return &GetSearchTagsUnauthorized{}
}

/* GetSearchTagsUnauthorized describes a response with status code 401, with default header values.

Unauthorized access for a lack of authentication

*/
type GetSearchTagsUnauthorized struct {
}

// IsSuccess returns true when this get search tags unauthorized response has a 2xx status code
func (o *GetSearchTagsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags unauthorized response has a 3xx status code
func (o *GetSearchTagsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags unauthorized response has a 4xx status code
func (o *GetSearchTagsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search tags unauthorized response has a 5xx status code
func (o *GetSearchTagsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags unauthorized response a status code equal to that given
func (o *GetSearchTagsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSearchTagsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsUnauthorized ", 401)
}

func (o *GetSearchTagsUnauthorized) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsUnauthorized ", 401)
}

func (o *GetSearchTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchTagsForbidden creates a GetSearchTagsForbidden with default headers values
func NewGetSearchTagsForbidden() *GetSearchTagsForbidden {
	return &GetSearchTagsForbidden{}
}

/* GetSearchTagsForbidden describes a response with status code 403, with default header values.

Forbidden access for a lack of sufficient privileges

*/
type GetSearchTagsForbidden struct {
}

// IsSuccess returns true when this get search tags forbidden response has a 2xx status code
func (o *GetSearchTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags forbidden response has a 3xx status code
func (o *GetSearchTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags forbidden response has a 4xx status code
func (o *GetSearchTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search tags forbidden response has a 5xx status code
func (o *GetSearchTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags forbidden response a status code equal to that given
func (o *GetSearchTagsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSearchTagsForbidden) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsForbidden ", 403)
}

func (o *GetSearchTagsForbidden) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsForbidden ", 403)
}

func (o *GetSearchTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchTagsNotFound creates a GetSearchTagsNotFound with default headers values
func NewGetSearchTagsNotFound() *GetSearchTagsNotFound {
	return &GetSearchTagsNotFound{}
}

/* GetSearchTagsNotFound describes a response with status code 404, with default header values.

Resource not found. The object requested does not exist or is not visible to the user.

*/
type GetSearchTagsNotFound struct {
}

// IsSuccess returns true when this get search tags not found response has a 2xx status code
func (o *GetSearchTagsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags not found response has a 3xx status code
func (o *GetSearchTagsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags not found response has a 4xx status code
func (o *GetSearchTagsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search tags not found response has a 5xx status code
func (o *GetSearchTagsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags not found response a status code equal to that given
func (o *GetSearchTagsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSearchTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsNotFound ", 404)
}

func (o *GetSearchTagsNotFound) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsNotFound ", 404)
}

func (o *GetSearchTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchTagsMethodNotAllowed creates a GetSearchTagsMethodNotAllowed with default headers values
func NewGetSearchTagsMethodNotAllowed() *GetSearchTagsMethodNotAllowed {
	return &GetSearchTagsMethodNotAllowed{}
}

/* GetSearchTagsMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed

*/
type GetSearchTagsMethodNotAllowed struct {
}

// IsSuccess returns true when this get search tags method not allowed response has a 2xx status code
func (o *GetSearchTagsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags method not allowed response has a 3xx status code
func (o *GetSearchTagsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags method not allowed response has a 4xx status code
func (o *GetSearchTagsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search tags method not allowed response has a 5xx status code
func (o *GetSearchTagsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get search tags method not allowed response a status code equal to that given
func (o *GetSearchTagsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *GetSearchTagsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsMethodNotAllowed ", 405)
}

func (o *GetSearchTagsMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsMethodNotAllowed ", 405)
}

func (o *GetSearchTagsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchTagsInternalServerError creates a GetSearchTagsInternalServerError with default headers values
func NewGetSearchTagsInternalServerError() *GetSearchTagsInternalServerError {
	return &GetSearchTagsInternalServerError{}
}

/* GetSearchTagsInternalServerError describes a response with status code 500, with default header values.

An internal error has occured. See error details.

*/
type GetSearchTagsInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this get search tags internal server error response has a 2xx status code
func (o *GetSearchTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search tags internal server error response has a 3xx status code
func (o *GetSearchTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search tags internal server error response has a 4xx status code
func (o *GetSearchTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search tags internal server error response has a 5xx status code
func (o *GetSearchTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get search tags internal server error response a status code equal to that given
func (o *GetSearchTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSearchTagsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSearchTagsInternalServerError) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] getSearchTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSearchTagsInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSearchTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTagsDefault creates a GetSearchTagsDefault with default headers values
func NewGetSearchTagsDefault(code int) *GetSearchTagsDefault {
	return &GetSearchTagsDefault{
		_statusCode: code,
	}
}

/* GetSearchTagsDefault describes a response with status code -1, with default header values.

Other error. See error details.

*/
type GetSearchTagsDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the get search tags default response
func (o *GetSearchTagsDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get search tags default response has a 2xx status code
func (o *GetSearchTagsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get search tags default response has a 3xx status code
func (o *GetSearchTagsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get search tags default response has a 4xx status code
func (o *GetSearchTagsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get search tags default response has a 5xx status code
func (o *GetSearchTagsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get search tags default response a status code equal to that given
func (o *GetSearchTagsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetSearchTagsDefault) Error() string {
	return fmt.Sprintf("[GET /search/tags][%d] GetSearchTags default  %+v", o._statusCode, o.Payload)
}

func (o *GetSearchTagsDefault) String() string {
	return fmt.Sprintf("[GET /search/tags][%d] GetSearchTags default  %+v", o._statusCode, o.Payload)
}

func (o *GetSearchTagsDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSearchTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
