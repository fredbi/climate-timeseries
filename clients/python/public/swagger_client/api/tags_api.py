# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_tags_get(self, **kwargs):  # noqa: E501
        """List all known tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_tags_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_tags_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_tags_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_tags_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all known tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_tags_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_tags_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_tags_tag_get(self, tag, **kwargs):  # noqa: E501
        """Search all entities with some tag  # noqa: E501

        This endpoint returns mulitple entities, such as classes or series.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_tags_tag_get(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tag: Filter the result by search for a given keyword, whenever tag search is applicable.  This parameter has no effect on objects where tag search is not applicable.  (required)
        :param str status: Filter the result according to a given status.  Only series in the \"PUBLISHED\" status are returned to the public.  Series owner may consult their series in any status. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :param str owner_id: The ID of the contributor. 
        :param str email: Refers to some data owner by email. 
        :return: Entities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_tags_tag_get_with_http_info(tag, **kwargs)  # noqa: E501
        else:
            (data) = self.search_tags_tag_get_with_http_info(tag, **kwargs)  # noqa: E501
            return data

    def search_tags_tag_get_with_http_info(self, tag, **kwargs):  # noqa: E501
        """Search all entities with some tag  # noqa: E501

        This endpoint returns mulitple entities, such as classes or series.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_tags_tag_get_with_http_info(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tag: Filter the result by search for a given keyword, whenever tag search is applicable.  This parameter has no effect on objects where tag search is not applicable.  (required)
        :param str status: Filter the result according to a given status.  Only series in the \"PUBLISHED\" status are returned to the public.  Series owner may consult their series in any status. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :param str owner_id: The ID of the contributor. 
        :param str email: Refers to some data owner by email. 
        :return: Entities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag', 'status', 'deep', 'brief', 'audit', 'owner_id', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_tags_tag_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `search_tags_tag_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('tag' in params and
                                                       len(params['tag']) > 100):
            raise ValueError("Invalid value for parameter `tag` when calling `search_tags_tag_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('tag' in params and
                                                       len(params['tag']) < 1):
            raise ValueError("Invalid value for parameter `tag` when calling `search_tags_tag_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('email' in params and
                                                       len(params['email']) > 100):
            raise ValueError("Invalid value for parameter `email` when calling `search_tags_tag_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('email' in params and
                                                       len(params['email']) < 1):
            raise ValueError("Invalid value for parameter `email` when calling `search_tags_tag_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/tags/{tag}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
