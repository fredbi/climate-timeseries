# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClassesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def classes_class_id_get(self, class_id, **kwargs):  # noqa: E501
        """Get metadata about a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_get(class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: ClassDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_get_with_http_info(class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_get_with_http_info(class_id, **kwargs)  # noqa: E501
            return data

    def classes_class_id_get_with_http_info(self, class_id, **kwargs):  # noqa: E501
        """Get metadata about a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_get_with_http_info(class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: ClassDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'deep', 'brief', 'audit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501

        query_params = []
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_class_id_members_class_member_id_delete(self, class_id, class_member_id, class_member, **kwargs):  # noqa: E501
        """Removes a member from a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_class_member_id_delete(class_id, class_member_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param int class_member_id: The unique identifier of a class member.  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_members_class_member_id_delete_with_http_info(class_id, class_member_id, class_member, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_members_class_member_id_delete_with_http_info(class_id, class_member_id, class_member, **kwargs)  # noqa: E501
            return data

    def classes_class_id_members_class_member_id_delete_with_http_info(self, class_id, class_member_id, class_member, **kwargs):  # noqa: E501
        """Removes a member from a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_class_member_id_delete_with_http_info(class_id, class_member_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param int class_member_id: The unique identifier of a class member.  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'class_member_id', 'class_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_members_class_member_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_members_class_member_id_delete`")  # noqa: E501
        # verify the required parameter 'class_member_id' is set
        if self.api_client.client_side_validation and ('class_member_id' not in params or
                                                       params['class_member_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_member_id` when calling `classes_class_id_members_class_member_id_delete`")  # noqa: E501
        # verify the required parameter 'class_member' is set
        if self.api_client.client_side_validation and ('class_member' not in params or
                                                       params['class_member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_member` when calling `classes_class_id_members_class_member_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501
        if 'class_member_id' in params:
            path_params['classMemberId'] = params['class_member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'class_member' in params:
            body_params = params['class_member']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}/members/{classMemberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_class_id_members_class_member_id_put(self, class_id, class_member_id, class_member, **kwargs):  # noqa: E501
        """Update a member of a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_class_member_id_put(class_id, class_member_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param int class_member_id: The unique identifier of a class member.  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_members_class_member_id_put_with_http_info(class_id, class_member_id, class_member, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_members_class_member_id_put_with_http_info(class_id, class_member_id, class_member, **kwargs)  # noqa: E501
            return data

    def classes_class_id_members_class_member_id_put_with_http_info(self, class_id, class_member_id, class_member, **kwargs):  # noqa: E501
        """Update a member of a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_class_member_id_put_with_http_info(class_id, class_member_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param int class_member_id: The unique identifier of a class member.  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'class_member_id', 'class_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_members_class_member_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_members_class_member_id_put`")  # noqa: E501
        # verify the required parameter 'class_member_id' is set
        if self.api_client.client_side_validation and ('class_member_id' not in params or
                                                       params['class_member_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_member_id` when calling `classes_class_id_members_class_member_id_put`")  # noqa: E501
        # verify the required parameter 'class_member' is set
        if self.api_client.client_side_validation and ('class_member' not in params or
                                                       params['class_member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_member` when calling `classes_class_id_members_class_member_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501
        if 'class_member_id' in params:
            path_params['classMemberId'] = params['class_member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'class_member' in params:
            body_params = params['class_member']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}/members/{classMemberId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_class_id_members_get(self, class_id, **kwargs):  # noqa: E501
        """Get all the members of a nomenclature class  # noqa: E501

        Returns a a collection of nomenclature class members.  Example:   GET /classes/munit/members returns all measurement units.  If the request negotiates a response MIME type with text/csv (with the Accept header), this endpoint produces a CSV file.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_get(class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param str glob: Filters the result according to a glob pattern applied on the short name of the requested object. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :param str tag: Filter the result by search for a given keyword, whenever tag search is applicable.  This parameter has no effect on objects where tag search is not applicable. 
        :param list[str] tags: Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.  Up to 5 tags can be searched.  This parameter has no effect on objects where tag search is not applicable. 
        :return: list[ClassNomenclature]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_members_get_with_http_info(class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_members_get_with_http_info(class_id, **kwargs)  # noqa: E501
            return data

    def classes_class_id_members_get_with_http_info(self, class_id, **kwargs):  # noqa: E501
        """Get all the members of a nomenclature class  # noqa: E501

        Returns a a collection of nomenclature class members.  Example:   GET /classes/munit/members returns all measurement units.  If the request negotiates a response MIME type with text/csv (with the Accept header), this endpoint produces a CSV file.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_get_with_http_info(class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param str glob: Filters the result according to a glob pattern applied on the short name of the requested object. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :param str tag: Filter the result by search for a given keyword, whenever tag search is applicable.  This parameter has no effect on objects where tag search is not applicable. 
        :param list[str] tags: Filter the result by search for one tag in the given list of keywords, whenever tag search is applicable.  Up to 5 tags can be searched.  This parameter has no effect on objects where tag search is not applicable. 
        :return: list[ClassNomenclature]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'glob', 'deep', 'brief', 'audit', 'tag', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_members_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('glob' in params and
                                                       len(params['glob']) > 100):
            raise ValueError("Invalid value for parameter `glob` when calling `classes_class_id_members_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('glob' in params and
                                                       len(params['glob']) < 1):
            raise ValueError("Invalid value for parameter `glob` when calling `classes_class_id_members_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('tag' in params and
                                                       len(params['tag']) > 100):
            raise ValueError("Invalid value for parameter `tag` when calling `classes_class_id_members_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('tag' in params and
                                                       len(params['tag']) < 1):
            raise ValueError("Invalid value for parameter `tag` when calling `classes_class_id_members_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('tags' in params and
                                            len(params['tags']) > 5):
            raise ValueError("Invalid value for parameter `tags` when calling `classes_class_id_members_get`, number of items must be less than or equal to `5`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501

        query_params = []
        if 'glob' in params:
            query_params.append(('glob', params['glob']))  # noqa: E501
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClassNomenclature]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_class_id_members_post(self, class_id, class_member, **kwargs):  # noqa: E501
        """Add a new member in a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_post(class_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_members_post_with_http_info(class_id, class_member, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_members_post_with_http_info(class_id, class_member, **kwargs)  # noqa: E501
            return data

    def classes_class_id_members_post_with_http_info(self, class_id, class_member, **kwargs):  # noqa: E501
        """Add a new member in a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_members_post_with_http_info(class_id, class_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param ClassNomenclature class_member: Class member metadata.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'class_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_members_post`")  # noqa: E501
        # verify the required parameter 'class_member' is set
        if self.api_client.client_side_validation and ('class_member' not in params or
                                                       params['class_member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_member` when calling `classes_class_id_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'class_member' in params:
            body_params = params['class_member']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_class_id_put(self, class_id, class_description, **kwargs):  # noqa: E501
        """Update descriptive metadata about a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_put(class_id, class_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param ClassDescription class_description: Class descriptive metadata.  (required)
        :return: ClassDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_class_id_put_with_http_info(class_id, class_description, **kwargs)  # noqa: E501
        else:
            (data) = self.classes_class_id_put_with_http_info(class_id, class_description, **kwargs)  # noqa: E501
            return data

    def classes_class_id_put_with_http_info(self, class_id, class_description, **kwargs):  # noqa: E501
        """Update descriptive metadata about a nomenclature class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_class_id_put_with_http_info(class_id, class_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_id: The internal name of a nomenclature class.  Valid classes are:   * constant: mathematical and physical constants   * mdimension: base measured dimensions   * mdomain: domains that pertain to measurements   * measurement: physical and economic measurements   * multiplier: unit multipliers aka prefixes (e.g. k,M,G...)   * munit: measurement units   * musystem: systems of measurement units   * ostatus: owner statuses   * owner: series owner   * period: time series periods (e.g. monthly, yearly...)   * role: series owner role   * source: data sources   * status: series and versions statuses   * theme: climate themes   * zone: geographical zones   * ztype: zone types  (required)
        :param ClassDescription class_description: Class descriptive metadata.  (required)
        :return: ClassDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_id', 'class_description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_class_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_id' is set
        if self.api_client.client_side_validation and ('class_id' not in params or
                                                       params['class_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_id` when calling `classes_class_id_put`")  # noqa: E501
        # verify the required parameter 'class_description' is set
        if self.api_client.client_side_validation and ('class_description' not in params or
                                                       params['class_description'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `class_description` when calling `classes_class_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'class_description' in params:
            body_params = params['class_description']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classes_get(self, **kwargs):  # noqa: E501
        """Get all valid nomenclature classes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str glob: Filters the result according to a glob pattern applied on the short name of the requested object. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: list[ClassNomenclature]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.classes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def classes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all valid nomenclature classes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str glob: Filters the result according to a glob pattern applied on the short name of the requested object. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: list[ClassNomenclature]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['glob', 'deep', 'brief', 'audit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classes_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('glob' in params and
                                                       len(params['glob']) > 100):
            raise ValueError("Invalid value for parameter `glob` when calling `classes_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('glob' in params and
                                                       len(params['glob']) < 1):
            raise ValueError("Invalid value for parameter `glob` when calling `classes_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'glob' in params:
            query_params.append(('glob', params['glob']))  # noqa: E501
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/classes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClassNomenclature]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
