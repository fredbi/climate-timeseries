# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SemverApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def series_series_id_semver_get(self, series_id, **kwargs):  # noqa: E501
        """Get all semver tags associated to a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_get(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.series_series_id_semver_get_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.series_series_id_semver_get_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def series_series_id_semver_get_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """Get all semver tags associated to a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_get_with_http_info(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method series_series_id_semver_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `series_series_id_semver_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesId'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/series/{seriesId}/semver', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def series_series_id_semver_semver_get(self, series_id, semver, **kwargs):  # noqa: E501
        """Get a version of a time series with a semver tag  # noqa: E501

        Semver tags follow semantic versioning rules (e.g. v1.2.3, v1.2.3-rc1, v1.3.0 ...).  Unless requested by the query parameters, the time series values are not returned by default.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_semver_get(series_id, semver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :param str semver: The semver tag of a series' version. (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: VersionedSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.series_series_id_semver_semver_get_with_http_info(series_id, semver, **kwargs)  # noqa: E501
        else:
            (data) = self.series_series_id_semver_semver_get_with_http_info(series_id, semver, **kwargs)  # noqa: E501
            return data

    def series_series_id_semver_semver_get_with_http_info(self, series_id, semver, **kwargs):  # noqa: E501
        """Get a version of a time series with a semver tag  # noqa: E501

        Semver tags follow semantic versioning rules (e.g. v1.2.3, v1.2.3-rc1, v1.3.0 ...).  Unless requested by the query parameters, the time series values are not returned by default.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_semver_get_with_http_info(series_id, semver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :param str semver: The semver tag of a series' version. (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: VersionedSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'semver', 'deep', 'brief', 'audit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method series_series_id_semver_semver_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `series_series_id_semver_semver_get`")  # noqa: E501
        # verify the required parameter 'semver' is set
        if self.api_client.client_side_validation and ('semver' not in params or
                                                       params['semver'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `semver` when calling `series_series_id_semver_semver_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesId'] = params['series_id']  # noqa: E501
        if 'semver' in params:
            path_params['semver'] = params['semver']  # noqa: E501

        query_params = []
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/series/{seriesId}/semver/{semver}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionedSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def series_series_id_semver_semver_values_get(self, series_id, semver, **kwargs):  # noqa: E501
        """Get the values of version of a time series with a semver tag  # noqa: E501

         If the request negotiates a response MIME type with text/csv (with the Accept header), this endpoint produces a CSV file.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_semver_values_get(series_id, semver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :param str semver: The semver tag of a series' version. (required)
        :param datetime _from: Truncates values starting from this date (boundary is included). 
        :param datetime to: Truncates values up to this date (boundary is included). 
        :param str convert: Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit. 
        :return: TsValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.series_series_id_semver_semver_values_get_with_http_info(series_id, semver, **kwargs)  # noqa: E501
        else:
            (data) = self.series_series_id_semver_semver_values_get_with_http_info(series_id, semver, **kwargs)  # noqa: E501
            return data

    def series_series_id_semver_semver_values_get_with_http_info(self, series_id, semver, **kwargs):  # noqa: E501
        """Get the values of version of a time series with a semver tag  # noqa: E501

         If the request negotiates a response MIME type with text/csv (with the Accept header), this endpoint produces a CSV file.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.series_series_id_semver_semver_values_get_with_http_info(series_id, semver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: The unique ID of a time series. (required)
        :param str semver: The semver tag of a series' version. (required)
        :param datetime _from: Truncates values starting from this date (boundary is included). 
        :param datetime to: Truncates values up to this date (boundary is included). 
        :param str convert: Converts values in some other compatible measurement unit, possibly specified as a composite measurement unit. 
        :return: TsValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'semver', '_from', 'to', 'convert']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method series_series_id_semver_semver_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `series_series_id_semver_semver_values_get`")  # noqa: E501
        # verify the required parameter 'semver' is set
        if self.api_client.client_side_validation and ('semver' not in params or
                                                       params['semver'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `semver` when calling `series_series_id_semver_semver_values_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('convert' in params and
                                                       len(params['convert']) > 100):
            raise ValueError("Invalid value for parameter `convert` when calling `series_series_id_semver_semver_values_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('convert' in params and
                                                       len(params['convert']) < 1):
            raise ValueError("Invalid value for parameter `convert` when calling `series_series_id_semver_semver_values_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesId'] = params['series_id']  # noqa: E501
        if 'semver' in params:
            path_params['semver'] = params['semver']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'convert' in params:
            query_params.append(('convert', params['convert']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/series/{seriesId}/semver/{semver}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TsValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
