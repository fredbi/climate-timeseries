# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Munit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_standard': 'bool',
        'included_multiplier': 'Multiplier',
        'unit_measurement': 'Measurement',
        'unit_measurement_system': 'Musystem',
        'metadata': 'Mumeta',
        'measurement_unit_has_conversions': 'list[ConversionSpec]'
    }

    attribute_map = {
        'is_standard': 'isStandard',
        'included_multiplier': 'includedMultiplier',
        'unit_measurement': 'unitMeasurement',
        'unit_measurement_system': 'unitMeasurementSystem',
        'metadata': 'metadata',
        'measurement_unit_has_conversions': 'measurementUnitHasConversions'
    }

    def __init__(self, is_standard=None, included_multiplier=None, unit_measurement=None, unit_measurement_system=None, metadata=None, measurement_unit_has_conversions=None, _configuration=None):  # noqa: E501
        """Munit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_standard = None
        self._included_multiplier = None
        self._unit_measurement = None
        self._unit_measurement_system = None
        self._metadata = None
        self._measurement_unit_has_conversions = None
        self.discriminator = None

        self.is_standard = is_standard
        if included_multiplier is not None:
            self.included_multiplier = included_multiplier
        if unit_measurement is not None:
            self.unit_measurement = unit_measurement
        if unit_measurement_system is not None:
            self.unit_measurement_system = unit_measurement_system
        if metadata is not None:
            self.metadata = metadata
        if measurement_unit_has_conversions is not None:
            self.measurement_unit_has_conversions = measurement_unit_has_conversions

    @property
    def is_standard(self):
        """Gets the is_standard of this Munit.  # noqa: E501


        :return: The is_standard of this Munit.  # noqa: E501
        :rtype: bool
        """
        return self._is_standard

    @is_standard.setter
    def is_standard(self, is_standard):
        """Sets the is_standard of this Munit.


        :param is_standard: The is_standard of this Munit.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_standard is None:
            raise ValueError("Invalid value for `is_standard`, must not be `None`")  # noqa: E501

        self._is_standard = is_standard

    @property
    def included_multiplier(self):
        """Gets the included_multiplier of this Munit.  # noqa: E501


        :return: The included_multiplier of this Munit.  # noqa: E501
        :rtype: Multiplier
        """
        return self._included_multiplier

    @included_multiplier.setter
    def included_multiplier(self, included_multiplier):
        """Sets the included_multiplier of this Munit.


        :param included_multiplier: The included_multiplier of this Munit.  # noqa: E501
        :type: Multiplier
        """

        self._included_multiplier = included_multiplier

    @property
    def unit_measurement(self):
        """Gets the unit_measurement of this Munit.  # noqa: E501


        :return: The unit_measurement of this Munit.  # noqa: E501
        :rtype: Measurement
        """
        return self._unit_measurement

    @unit_measurement.setter
    def unit_measurement(self, unit_measurement):
        """Sets the unit_measurement of this Munit.


        :param unit_measurement: The unit_measurement of this Munit.  # noqa: E501
        :type: Measurement
        """

        self._unit_measurement = unit_measurement

    @property
    def unit_measurement_system(self):
        """Gets the unit_measurement_system of this Munit.  # noqa: E501


        :return: The unit_measurement_system of this Munit.  # noqa: E501
        :rtype: Musystem
        """
        return self._unit_measurement_system

    @unit_measurement_system.setter
    def unit_measurement_system(self, unit_measurement_system):
        """Sets the unit_measurement_system of this Munit.


        :param unit_measurement_system: The unit_measurement_system of this Munit.  # noqa: E501
        :type: Musystem
        """

        self._unit_measurement_system = unit_measurement_system

    @property
    def metadata(self):
        """Gets the metadata of this Munit.  # noqa: E501


        :return: The metadata of this Munit.  # noqa: E501
        :rtype: Mumeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Munit.


        :param metadata: The metadata of this Munit.  # noqa: E501
        :type: Mumeta
        """

        self._metadata = metadata

    @property
    def measurement_unit_has_conversions(self):
        """Gets the measurement_unit_has_conversions of this Munit.  # noqa: E501


        :return: The measurement_unit_has_conversions of this Munit.  # noqa: E501
        :rtype: list[ConversionSpec]
        """
        return self._measurement_unit_has_conversions

    @measurement_unit_has_conversions.setter
    def measurement_unit_has_conversions(self, measurement_unit_has_conversions):
        """Sets the measurement_unit_has_conversions of this Munit.


        :param measurement_unit_has_conversions: The measurement_unit_has_conversions of this Munit.  # noqa: E501
        :type: list[ConversionSpec]
        """

        self._measurement_unit_has_conversions = measurement_unit_has_conversions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Munit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Munit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Munit):
            return True

        return self.to_dict() != other.to_dict()
