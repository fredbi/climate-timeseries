# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TimeseriesModelsYamldefinitionsclassDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'ClassNomenclatureName',
        'table_name': 'str',
        'title': 'Translation',
        'description_short': 'Translation',
        'description_long': 'Translation',
        'metadata': 'ClassMetadata'
    }

    attribute_map = {
        '_class': 'class',
        'table_name': 'tableName',
        'title': 'title',
        'description_short': 'descriptionShort',
        'description_long': 'descriptionLong',
        'metadata': 'metadata'
    }

    def __init__(self, _class=None, table_name=None, title=None, description_short=None, description_long=None, metadata=None, _configuration=None):  # noqa: E501
        """TimeseriesModelsYamldefinitionsclassDescription - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__class = None
        self._table_name = None
        self._title = None
        self._description_short = None
        self._description_long = None
        self._metadata = None
        self.discriminator = None

        self._class = _class
        self.table_name = table_name
        self.title = title
        self.description_short = description_short
        self.description_long = description_long
        self.metadata = metadata

    @property
    def _class(self):
        """Gets the _class of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The _class of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: ClassNomenclatureName
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this TimeseriesModelsYamldefinitionsclassDescription.


        :param _class: The _class of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: ClassNomenclatureName
        """
        if self._configuration.client_side_validation and _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def table_name(self):
        """Gets the table_name of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The table_name of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TimeseriesModelsYamldefinitionsclassDescription.


        :param table_name: The table_name of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def title(self):
        """Gets the title of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The title of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: Translation
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TimeseriesModelsYamldefinitionsclassDescription.


        :param title: The title of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: Translation
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description_short(self):
        """Gets the description_short of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The description_short of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: Translation
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this TimeseriesModelsYamldefinitionsclassDescription.


        :param description_short: The description_short of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: Translation
        """
        if self._configuration.client_side_validation and description_short is None:
            raise ValueError("Invalid value for `description_short`, must not be `None`")  # noqa: E501

        self._description_short = description_short

    @property
    def description_long(self):
        """Gets the description_long of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The description_long of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: Translation
        """
        return self._description_long

    @description_long.setter
    def description_long(self, description_long):
        """Sets the description_long of this TimeseriesModelsYamldefinitionsclassDescription.


        :param description_long: The description_long of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: Translation
        """
        if self._configuration.client_side_validation and description_long is None:
            raise ValueError("Invalid value for `description_long`, must not be `None`")  # noqa: E501

        self._description_long = description_long

    @property
    def metadata(self):
        """Gets the metadata of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501


        :return: The metadata of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :rtype: ClassMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TimeseriesModelsYamldefinitionsclassDescription.


        :param metadata: The metadata of this TimeseriesModelsYamldefinitionsclassDescription.  # noqa: E501
        :type: ClassMetadata
        """
        if self._configuration.client_side_validation and metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeseriesModelsYamldefinitionsclassDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesModelsYamldefinitionsclassDescription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeseriesModelsYamldefinitionsclassDescription):
            return True

        return self.to_dict() != other.to_dict()
