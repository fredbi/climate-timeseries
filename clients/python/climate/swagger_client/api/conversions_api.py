# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConversionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def conversion_from_unit_to_unit_get(self, from_unit, to_unit, **kwargs):  # noqa: E501
        """Get the conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_from_unit_to_unit_get(from_unit, to_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: ConversionSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversion_from_unit_to_unit_get_with_http_info(from_unit, to_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.conversion_from_unit_to_unit_get_with_http_info(from_unit, to_unit, **kwargs)  # noqa: E501
            return data

    def conversion_from_unit_to_unit_get_with_http_info(self, from_unit, to_unit, **kwargs):  # noqa: E501
        """Get the conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_from_unit_to_unit_get_with_http_info(from_unit, to_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: ConversionSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit', 'deep', 'brief', 'audit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversion_from_unit_to_unit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_unit' is set
        if self.api_client.client_side_validation and ('from_unit' not in params or
                                                       params['from_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_unit` when calling `conversion_from_unit_to_unit_get`")  # noqa: E501
        # verify the required parameter 'to_unit' is set
        if self.api_client.client_side_validation and ('to_unit' not in params or
                                                       params['to_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_unit` when calling `conversion_from_unit_to_unit_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversion_from_unit_to_unit_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversion_from_unit_to_unit_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversion_from_unit_to_unit_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversion_from_unit_to_unit_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'from_unit' in params:
            path_params['fromUnit'] = params['from_unit']  # noqa: E501
        if 'to_unit' in params:
            path_params['toUnit'] = params['to_unit']  # noqa: E501

        query_params = []
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversion/{fromUnit}/{toUnit}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversionSpec',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversion_get(self, **kwargs):  # noqa: E501
        """Get the conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted. 
        :param str to_unit: Target unit result of the conversion. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: Conversion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversion_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.conversion_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def conversion_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted. 
        :param str to_unit: Target unit result of the conversion. 
        :param bool deep: When deep is specified, the response will contain a deep representation of the object, rather than just a shallow description. 
        :param bool brief: When brief is specified, the response will only contain essential data and strip long descriptions. 
        :param bool audit: When audit is specified, the response will also contain the audit trail field. 
        :return: Conversion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit', 'deep', 'brief', 'audit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversion_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversion_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversion_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversion_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversion_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_unit' in params:
            query_params.append(('fromUnit', params['from_unit']))  # noqa: E501
        if 'to_unit' in params:
            query_params.append(('toUnit', params['to_unit']))  # noqa: E501
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'brief' in params:
            query_params.append(('brief', params['brief']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Conversion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversions_from_unit_to_unit_delete(self, from_unit, to_unit, **kwargs):  # noqa: E501
        """Delete an existing conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_delete(from_unit, to_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversions_from_unit_to_unit_delete_with_http_info(from_unit, to_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.conversions_from_unit_to_unit_delete_with_http_info(from_unit, to_unit, **kwargs)  # noqa: E501
            return data

    def conversions_from_unit_to_unit_delete_with_http_info(self, from_unit, to_unit, **kwargs):  # noqa: E501
        """Delete an existing conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_delete_with_http_info(from_unit, to_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversions_from_unit_to_unit_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_unit' is set
        if self.api_client.client_side_validation and ('from_unit' not in params or
                                                       params['from_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_unit` when calling `conversions_from_unit_to_unit_delete`")  # noqa: E501
        # verify the required parameter 'to_unit' is set
        if self.api_client.client_side_validation and ('to_unit' not in params or
                                                       params['to_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_unit` when calling `conversions_from_unit_to_unit_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_delete`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_delete`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_delete`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_delete`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'from_unit' in params:
            path_params['fromUnit'] = params['from_unit']  # noqa: E501
        if 'to_unit' in params:
            path_params['toUnit'] = params['to_unit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/conversions/{fromUnit}/{toUnit}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversions_from_unit_to_unit_post(self, from_unit, to_unit, conversion_spec, **kwargs):  # noqa: E501
        """Creates add new conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_post(from_unit, to_unit, conversion_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param ConversionSpec conversion_spec: Unit conversion specification.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversions_from_unit_to_unit_post_with_http_info(from_unit, to_unit, conversion_spec, **kwargs)  # noqa: E501
        else:
            (data) = self.conversions_from_unit_to_unit_post_with_http_info(from_unit, to_unit, conversion_spec, **kwargs)  # noqa: E501
            return data

    def conversions_from_unit_to_unit_post_with_http_info(self, from_unit, to_unit, conversion_spec, **kwargs):  # noqa: E501
        """Creates add new conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_post_with_http_info(from_unit, to_unit, conversion_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param ConversionSpec conversion_spec: Unit conversion specification.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit', 'conversion_spec']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversions_from_unit_to_unit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_unit' is set
        if self.api_client.client_side_validation and ('from_unit' not in params or
                                                       params['from_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_unit` when calling `conversions_from_unit_to_unit_post`")  # noqa: E501
        # verify the required parameter 'to_unit' is set
        if self.api_client.client_side_validation and ('to_unit' not in params or
                                                       params['to_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_unit` when calling `conversions_from_unit_to_unit_post`")  # noqa: E501
        # verify the required parameter 'conversion_spec' is set
        if self.api_client.client_side_validation and ('conversion_spec' not in params or
                                                       params['conversion_spec'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conversion_spec` when calling `conversions_from_unit_to_unit_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_post`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_post`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_post`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_post`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'from_unit' in params:
            path_params['fromUnit'] = params['from_unit']  # noqa: E501
        if 'to_unit' in params:
            path_params['toUnit'] = params['to_unit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conversion_spec' in params:
            body_params = params['conversion_spec']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/conversions/{fromUnit}/{toUnit}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversions_from_unit_to_unit_put(self, from_unit, to_unit, conversion_spec, **kwargs):  # noqa: E501
        """Update an existing conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_put(from_unit, to_unit, conversion_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param ConversionSpec conversion_spec: Unit conversion specification.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversions_from_unit_to_unit_put_with_http_info(from_unit, to_unit, conversion_spec, **kwargs)  # noqa: E501
        else:
            (data) = self.conversions_from_unit_to_unit_put_with_http_info(from_unit, to_unit, conversion_spec, **kwargs)  # noqa: E501
            return data

    def conversions_from_unit_to_unit_put_with_http_info(self, from_unit, to_unit, conversion_spec, **kwargs):  # noqa: E501
        """Update an existing conversion specification from unit to unit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_from_unit_to_unit_put_with_http_info(from_unit, to_unit, conversion_spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted.  (required)
        :param str to_unit: Original unit to be converted.  (required)
        :param ConversionSpec conversion_spec: Unit conversion specification.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit', 'conversion_spec']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversions_from_unit_to_unit_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_unit' is set
        if self.api_client.client_side_validation and ('from_unit' not in params or
                                                       params['from_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_unit` when calling `conversions_from_unit_to_unit_put`")  # noqa: E501
        # verify the required parameter 'to_unit' is set
        if self.api_client.client_side_validation and ('to_unit' not in params or
                                                       params['to_unit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_unit` when calling `conversions_from_unit_to_unit_put`")  # noqa: E501
        # verify the required parameter 'conversion_spec' is set
        if self.api_client.client_side_validation and ('conversion_spec' not in params or
                                                       params['conversion_spec'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conversion_spec` when calling `conversions_from_unit_to_unit_put`")  # noqa: E501

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_put`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_from_unit_to_unit_put`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_put`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_from_unit_to_unit_put`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'from_unit' in params:
            path_params['fromUnit'] = params['from_unit']  # noqa: E501
        if 'to_unit' in params:
            path_params['toUnit'] = params['to_unit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conversion_spec' in params:
            body_params = params['conversion_spec']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/conversions/{fromUnit}/{toUnit}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversions_get(self, **kwargs):  # noqa: E501
        """List available unit conversions, with some query filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted. 
        :param str to_unit: Target unit result of the conversion. 
        :return: list[Conversion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.conversions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def conversions_get_with_http_info(self, **kwargs):  # noqa: E501
        """List available unit conversions, with some query filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_unit: Original unit to be converted. 
        :param str to_unit: Target unit result of the conversion. 
        :return: list[Conversion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_unit', 'to_unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversions_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) > 100):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('from_unit' in params and
                                                       len(params['from_unit']) < 1):
            raise ValueError("Invalid value for parameter `from_unit` when calling `conversions_get`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) > 100):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_get`, length must be less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('to_unit' in params and
                                                       len(params['to_unit']) < 1):
            raise ValueError("Invalid value for parameter `to_unit` when calling `conversions_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_unit' in params:
            query_params.append(('fromUnit', params['from_unit']))  # noqa: E501
        if 'to_unit' in params:
            query_params.append(('toUnit', params['to_unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Conversion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
