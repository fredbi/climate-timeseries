# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Constant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'value': 'float',
        'metadata': 'Mumeta',
        'measurement_unit': 'Munit',
        'constant_has_measurement_domains': 'list[Mdomain]'
    }

    attribute_map = {
        'symbol': 'symbol',
        'value': 'value',
        'metadata': 'metadata',
        'measurement_unit': 'measurementUnit',
        'constant_has_measurement_domains': 'constantHasMeasurementDomains'
    }

    def __init__(self, symbol=None, value=None, metadata=None, measurement_unit=None, constant_has_measurement_domains=None, _configuration=None):  # noqa: E501
        """Constant - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._value = None
        self._metadata = None
        self._measurement_unit = None
        self._constant_has_measurement_domains = None
        self.discriminator = None

        self.symbol = symbol
        self.value = value
        self.metadata = metadata
        if measurement_unit is not None:
            self.measurement_unit = measurement_unit
        if constant_has_measurement_domains is not None:
            self.constant_has_measurement_domains = constant_has_measurement_domains

    @property
    def symbol(self):
        """Gets the symbol of this Constant.  # noqa: E501


        :return: The symbol of this Constant.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Constant.


        :param symbol: The symbol of this Constant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                symbol is not None and len(symbol) > 10):
            raise ValueError("Invalid value for `symbol`, length must be less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                symbol is not None and len(symbol) < 1):
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")  # noqa: E501

        self._symbol = symbol

    @property
    def value(self):
        """Gets the value of this Constant.  # noqa: E501


        :return: The value of this Constant.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Constant.


        :param value: The value of this Constant.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def metadata(self):
        """Gets the metadata of this Constant.  # noqa: E501


        :return: The metadata of this Constant.  # noqa: E501
        :rtype: Mumeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Constant.


        :param metadata: The metadata of this Constant.  # noqa: E501
        :type: Mumeta
        """
        if self._configuration.client_side_validation and metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Constant.  # noqa: E501


        :return: The measurement_unit of this Constant.  # noqa: E501
        :rtype: Munit
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Constant.


        :param measurement_unit: The measurement_unit of this Constant.  # noqa: E501
        :type: Munit
        """

        self._measurement_unit = measurement_unit

    @property
    def constant_has_measurement_domains(self):
        """Gets the constant_has_measurement_domains of this Constant.  # noqa: E501


        :return: The constant_has_measurement_domains of this Constant.  # noqa: E501
        :rtype: list[Mdomain]
        """
        return self._constant_has_measurement_domains

    @constant_has_measurement_domains.setter
    def constant_has_measurement_domains(self, constant_has_measurement_domains):
        """Sets the constant_has_measurement_domains of this Constant.


        :param constant_has_measurement_domains: The constant_has_measurement_domains of this Constant.  # noqa: E501
        :type: list[Mdomain]
        """

        self._constant_has_measurement_domains = constant_has_measurement_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Constant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Constant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Constant):
            return True

        return self.to_dict() != other.to_dict()
