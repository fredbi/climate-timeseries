# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Series(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'Translation',
        'description_short': 'Translation',
        'description_long': 'Translation',
        'time_period': 'Period',
        'measurement_unit': 'Munit',
        'input_composed_unit': 'CompositeUnit',
        'status': 'Vstatus',
        'status_change_reason': 'Translation',
        'zone': 'Zone',
        'data_source': 'Source',
        'tags': 'SearchTags',
        'linked_documents': 'Documents',
        'audit_trail': 'Audit',
        'series_has_themes': 'list[Theme]',
        'series_has_owners': 'list[Owner]',
        'series_has_versions': 'list[VersionedSeries]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description_short': 'descriptionShort',
        'description_long': 'descriptionLong',
        'time_period': 'timePeriod',
        'measurement_unit': 'measurementUnit',
        'input_composed_unit': 'inputComposedUnit',
        'status': 'status',
        'status_change_reason': 'statusChangeReason',
        'zone': 'zone',
        'data_source': 'dataSource',
        'tags': 'tags',
        'linked_documents': 'linkedDocuments',
        'audit_trail': 'auditTrail',
        'series_has_themes': 'seriesHasThemes',
        'series_has_owners': 'seriesHasOwners',
        'series_has_versions': 'seriesHasVersions'
    }

    def __init__(self, id=None, title=None, description_short=None, description_long=None, time_period=None, measurement_unit=None, input_composed_unit=None, status=None, status_change_reason=None, zone=None, data_source=None, tags=None, linked_documents=None, audit_trail=None, series_has_themes=None, series_has_owners=None, series_has_versions=None, _configuration=None):  # noqa: E501
        """Series - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._description_short = None
        self._description_long = None
        self._time_period = None
        self._measurement_unit = None
        self._input_composed_unit = None
        self._status = None
        self._status_change_reason = None
        self._zone = None
        self._data_source = None
        self._tags = None
        self._linked_documents = None
        self._audit_trail = None
        self._series_has_themes = None
        self._series_has_owners = None
        self._series_has_versions = None
        self.discriminator = None

        self.id = id
        self.title = title
        if description_short is not None:
            self.description_short = description_short
        if description_long is not None:
            self.description_long = description_long
        self.time_period = time_period
        self.measurement_unit = measurement_unit
        if input_composed_unit is not None:
            self.input_composed_unit = input_composed_unit
        self.status = status
        if status_change_reason is not None:
            self.status_change_reason = status_change_reason
        self.zone = zone
        self.data_source = data_source
        if tags is not None:
            self.tags = tags
        if linked_documents is not None:
            self.linked_documents = linked_documents
        if audit_trail is not None:
            self.audit_trail = audit_trail
        if series_has_themes is not None:
            self.series_has_themes = series_has_themes
        if series_has_owners is not None:
            self.series_has_owners = series_has_owners
        if series_has_versions is not None:
            self.series_has_versions = series_has_versions

    @property
    def id(self):
        """Gets the id of this Series.  # noqa: E501


        :return: The id of this Series.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Series.


        :param id: The id of this Series.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Series.  # noqa: E501


        :return: The title of this Series.  # noqa: E501
        :rtype: Translation
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Series.


        :param title: The title of this Series.  # noqa: E501
        :type: Translation
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description_short(self):
        """Gets the description_short of this Series.  # noqa: E501


        :return: The description_short of this Series.  # noqa: E501
        :rtype: Translation
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this Series.


        :param description_short: The description_short of this Series.  # noqa: E501
        :type: Translation
        """

        self._description_short = description_short

    @property
    def description_long(self):
        """Gets the description_long of this Series.  # noqa: E501


        :return: The description_long of this Series.  # noqa: E501
        :rtype: Translation
        """
        return self._description_long

    @description_long.setter
    def description_long(self, description_long):
        """Sets the description_long of this Series.


        :param description_long: The description_long of this Series.  # noqa: E501
        :type: Translation
        """

        self._description_long = description_long

    @property
    def time_period(self):
        """Gets the time_period of this Series.  # noqa: E501


        :return: The time_period of this Series.  # noqa: E501
        :rtype: Period
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this Series.


        :param time_period: The time_period of this Series.  # noqa: E501
        :type: Period
        """
        if self._configuration.client_side_validation and time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")  # noqa: E501

        self._time_period = time_period

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Series.  # noqa: E501


        :return: The measurement_unit of this Series.  # noqa: E501
        :rtype: Munit
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Series.


        :param measurement_unit: The measurement_unit of this Series.  # noqa: E501
        :type: Munit
        """
        if self._configuration.client_side_validation and measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")  # noqa: E501

        self._measurement_unit = measurement_unit

    @property
    def input_composed_unit(self):
        """Gets the input_composed_unit of this Series.  # noqa: E501


        :return: The input_composed_unit of this Series.  # noqa: E501
        :rtype: CompositeUnit
        """
        return self._input_composed_unit

    @input_composed_unit.setter
    def input_composed_unit(self, input_composed_unit):
        """Sets the input_composed_unit of this Series.


        :param input_composed_unit: The input_composed_unit of this Series.  # noqa: E501
        :type: CompositeUnit
        """

        self._input_composed_unit = input_composed_unit

    @property
    def status(self):
        """Gets the status of this Series.  # noqa: E501


        :return: The status of this Series.  # noqa: E501
        :rtype: Vstatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Series.


        :param status: The status of this Series.  # noqa: E501
        :type: Vstatus
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_change_reason(self):
        """Gets the status_change_reason of this Series.  # noqa: E501


        :return: The status_change_reason of this Series.  # noqa: E501
        :rtype: Translation
        """
        return self._status_change_reason

    @status_change_reason.setter
    def status_change_reason(self, status_change_reason):
        """Sets the status_change_reason of this Series.


        :param status_change_reason: The status_change_reason of this Series.  # noqa: E501
        :type: Translation
        """

        self._status_change_reason = status_change_reason

    @property
    def zone(self):
        """Gets the zone of this Series.  # noqa: E501


        :return: The zone of this Series.  # noqa: E501
        :rtype: Zone
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Series.


        :param zone: The zone of this Series.  # noqa: E501
        :type: Zone
        """
        if self._configuration.client_side_validation and zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    @property
    def data_source(self):
        """Gets the data_source of this Series.  # noqa: E501


        :return: The data_source of this Series.  # noqa: E501
        :rtype: Source
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Series.


        :param data_source: The data_source of this Series.  # noqa: E501
        :type: Source
        """
        if self._configuration.client_side_validation and data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")  # noqa: E501

        self._data_source = data_source

    @property
    def tags(self):
        """Gets the tags of this Series.  # noqa: E501


        :return: The tags of this Series.  # noqa: E501
        :rtype: SearchTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Series.


        :param tags: The tags of this Series.  # noqa: E501
        :type: SearchTags
        """

        self._tags = tags

    @property
    def linked_documents(self):
        """Gets the linked_documents of this Series.  # noqa: E501


        :return: The linked_documents of this Series.  # noqa: E501
        :rtype: Documents
        """
        return self._linked_documents

    @linked_documents.setter
    def linked_documents(self, linked_documents):
        """Sets the linked_documents of this Series.


        :param linked_documents: The linked_documents of this Series.  # noqa: E501
        :type: Documents
        """

        self._linked_documents = linked_documents

    @property
    def audit_trail(self):
        """Gets the audit_trail of this Series.  # noqa: E501


        :return: The audit_trail of this Series.  # noqa: E501
        :rtype: Audit
        """
        return self._audit_trail

    @audit_trail.setter
    def audit_trail(self, audit_trail):
        """Sets the audit_trail of this Series.


        :param audit_trail: The audit_trail of this Series.  # noqa: E501
        :type: Audit
        """

        self._audit_trail = audit_trail

    @property
    def series_has_themes(self):
        """Gets the series_has_themes of this Series.  # noqa: E501


        :return: The series_has_themes of this Series.  # noqa: E501
        :rtype: list[Theme]
        """
        return self._series_has_themes

    @series_has_themes.setter
    def series_has_themes(self, series_has_themes):
        """Sets the series_has_themes of this Series.


        :param series_has_themes: The series_has_themes of this Series.  # noqa: E501
        :type: list[Theme]
        """

        self._series_has_themes = series_has_themes

    @property
    def series_has_owners(self):
        """Gets the series_has_owners of this Series.  # noqa: E501


        :return: The series_has_owners of this Series.  # noqa: E501
        :rtype: list[Owner]
        """
        return self._series_has_owners

    @series_has_owners.setter
    def series_has_owners(self, series_has_owners):
        """Sets the series_has_owners of this Series.


        :param series_has_owners: The series_has_owners of this Series.  # noqa: E501
        :type: list[Owner]
        """

        self._series_has_owners = series_has_owners

    @property
    def series_has_versions(self):
        """Gets the series_has_versions of this Series.  # noqa: E501


        :return: The series_has_versions of this Series.  # noqa: E501
        :rtype: list[VersionedSeries]
        """
        return self._series_has_versions

    @series_has_versions.setter
    def series_has_versions(self, series_has_versions):
        """Sets the series_has_versions of this Series.


        :param series_has_versions: The series_has_versions of this Series.  # noqa: E501
        :type: list[VersionedSeries]
        """

        self._series_has_versions = series_has_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Series, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Series):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Series):
            return True

        return self.to_dict() != other.to_dict()
