# coding: utf-8

"""
    Climate time series API

    The API allows the public to search and consult time series about climate change research conducted by TheShiftProject.  The climate time series API allows contributors to upload time series about their climate change models and studies.  Other secured endpoints allows admins to maintain the nomenclatures used by the climate time series, such as units etc. Timeseries publication status and ownership is for now managed by admins.   # noqa: E501

    OpenAPI spec version: v0.0.1
    Contact: fredbi@yahoo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TimeseriesModelsYamldefinitionsconversionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to_unit_code': 'str',
        'factor': 'float',
        'intercept': 'float',
        'formula': 'str',
        'reverse_formula': 'str'
    }

    attribute_map = {
        'to_unit_code': 'toUnitCode',
        'factor': 'factor',
        'intercept': 'intercept',
        'formula': 'formula',
        'reverse_formula': 'reverse_formula'
    }

    def __init__(self, to_unit_code=None, factor=None, intercept=None, formula=None, reverse_formula=None, _configuration=None):  # noqa: E501
        """TimeseriesModelsYamldefinitionsconversionSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._to_unit_code = None
        self._factor = None
        self._intercept = None
        self._formula = None
        self._reverse_formula = None
        self.discriminator = None

        self.to_unit_code = to_unit_code
        if factor is not None:
            self.factor = factor
        if intercept is not None:
            self.intercept = intercept
        if formula is not None:
            self.formula = formula
        if reverse_formula is not None:
            self.reverse_formula = reverse_formula

    @property
    def to_unit_code(self):
        """Gets the to_unit_code of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501


        :return: The to_unit_code of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :rtype: str
        """
        return self._to_unit_code

    @to_unit_code.setter
    def to_unit_code(self, to_unit_code):
        """Sets the to_unit_code of this TimeseriesModelsYamldefinitionsconversionSpec.


        :param to_unit_code: The to_unit_code of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and to_unit_code is None:
            raise ValueError("Invalid value for `to_unit_code`, must not be `None`")  # noqa: E501

        self._to_unit_code = to_unit_code

    @property
    def factor(self):
        """Gets the factor of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501


        :return: The factor of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :rtype: float
        """
        return self._factor

    @factor.setter
    def factor(self, factor):
        """Sets the factor of this TimeseriesModelsYamldefinitionsconversionSpec.


        :param factor: The factor of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :type: float
        """

        self._factor = factor

    @property
    def intercept(self):
        """Gets the intercept of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501


        :return: The intercept of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :rtype: float
        """
        return self._intercept

    @intercept.setter
    def intercept(self, intercept):
        """Sets the intercept of this TimeseriesModelsYamldefinitionsconversionSpec.


        :param intercept: The intercept of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :type: float
        """

        self._intercept = intercept

    @property
    def formula(self):
        """Gets the formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501


        :return: The formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this TimeseriesModelsYamldefinitionsconversionSpec.


        :param formula: The formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def reverse_formula(self):
        """Gets the reverse_formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501


        :return: The reverse_formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :rtype: str
        """
        return self._reverse_formula

    @reverse_formula.setter
    def reverse_formula(self, reverse_formula):
        """Sets the reverse_formula of this TimeseriesModelsYamldefinitionsconversionSpec.


        :param reverse_formula: The reverse_formula of this TimeseriesModelsYamldefinitionsconversionSpec.  # noqa: E501
        :type: str
        """

        self._reverse_formula = reverse_formula

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeseriesModelsYamldefinitionsconversionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesModelsYamldefinitionsconversionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeseriesModelsYamldefinitionsconversionSpec):
            return True

        return self.to_dict() != other.to_dict()
